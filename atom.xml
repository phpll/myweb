<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://newdy.cf</id>
    <title>Gridea</title>
    <updated>2020-02-23T15:28:17.684Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://newdy.cf"/>
    <link rel="self" href="https://newdy.cf/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://newdy.cf/images/avatar.png</logo>
    <icon>https://newdy.cf/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[天猫精灵X1自动恢复出厂设置解决方法]]></title>
        <id>https://newdy.cf/post/tian-mao-jing-ling-x1-zi-dong-hui-fu-chu-han-she-zhi-jie-jue-fang-fa/</id>
        <link href="https://newdy.cf/post/tian-mao-jing-ling-x1-zi-dong-hui-fu-chu-han-she-zhi-jie-jue-fang-fa/">
        </link>
        <updated>2020-02-23T15:05:57.000Z</updated>
        <content type="html"><![CDATA[<p>最近天猫精灵使用一段时间后就会自动恢复出厂，需要重新配置网络等，特别麻烦。 偶见一篇文章详解了出现该问题的原因及解决办法，跟着动手试了下，还真心好了。 整理了一下操作步骤，给需要的朋友一个解决办法。</p>
<p>一、修复方法<br>
<img src="https://newdy.cf/post-images/1582470411036.jpg" alt="" loading="lazy"></p>
<p>修复方法：SW1右0.5V跳线到GND</p>
<p>简单操作，手残党勿怕，实在搞不定，找个修电器的帮忙操作下也就几块钱。</p>
<p>二、修复步骤详解</p>
<ol>
<li>
<p>拆开底座<br>
小心撕掉底部的橡胶防滑垫，会看见3个螺丝孔，螺丝刀直接顶下去，松动全部螺丝，拿下底座。<br>
<img src="https://newdy.cf/post-images/1582470437258.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>分离主板与底座<br>
拿下底座后，会看见两个固定主板的卡口，轻顶住，小心拿下主板（注意后面还有排线，分离时不要太用力）。<br>
<img src="https://newdy.cf/post-images/1582470469204.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>拔掉电源排线<br>
分离主板与底座后，到主板底面，分离主板与电源控制板的排线。排线直接匀力拔出即可。<br>
<img src="https://newdy.cf/post-images/1582470508273.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>焊接跳线<br>
找一根跳线（家里面找不到细的线了，乱找了一根坏的USB线，剪掉抽一截出来），焊接SW1右侧 与 GND接口，实测可以不拆掉SW1（其实就是恢复出厂设置的那个孔顶下来的按钮）也能正常使用，且保留了恢复出厂的功能。<br>
焊接完毕后，通电测试，上电正常就按拆开顺序倒序重新安装回去。<br>
至此修复完毕，目前半个月左右了未再出现自动恢复出厂的情况。<br>
<img src="https://newdy.cf/post-images/1582470546211.jpg" alt="" loading="lazy"></p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BBR/BBRPLUS/锐速/BBR2一键脚本]]></title>
        <id>https://newdy.cf/post/bbrbbrplusrui-su-bbr2-yi-jian-jiao-ben/</id>
        <link href="https://newdy.cf/post/bbrbbrplusrui-su-bbr2-yi-jian-jiao-ben/">
        </link>
        <updated>2020-02-23T07:51:12.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>wget -N --no-check-certificate &quot;https://github.com/ylx2016/Linux-NetSpeed/releases/download/sh/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://newdy.cf/post-images/1582444326731.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[全能中继工具haproxy（中转/端口转发）]]></title>
        <id>https://newdy.cf/post/quan-neng-zhong-ji-gong-ju-haproxyzhong-zhuan-duan-kou-zhuan-fa/</id>
        <link href="https://newdy.cf/post/quan-neng-zhong-ji-gong-ju-haproxyzhong-zhuan-duan-kou-zhuan-fa/">
        </link>
        <updated>2020-02-23T07:42:49.000Z</updated>
        <content type="html"><![CDATA[<p>概述<br>
优点：功能强大，甚至支持https转发</p>
<p>缺点：配置略微复杂</p>
<p>安装<br>
apt-get install -y haproxy<br>
配置文件<br>
nano /etc/haproxy/haproxy.cfg<br>
global<br>
log 127.0.0.1   local0           #[日志输出配置，所有日志都记录在本机，通过local0输出]<br>
log 127.0.0.1   local1 notice    #定义haproxy 日志级别[error warringinfo debug]<br>
daemon                    #以后台形式运行harpoxy<br>
nbproc 1                         #设置进程数量<br>
pidfile /var/run/haproxy.pid<br>
ulimit-n 65536                    #ulimit 的数量限制<br>
#maxconn 2000000                  #默认最大连接数,需考虑ulimit-n限制<br>
#chroot /usr/local/haproxy<br>
tune.ssl.default-dh-param  2048<br>
defaults<br>
log global<br>
mode tcp                  #默认的模式mode { tcp|http|health }，tcp是4层，http是7层，health只会返回OK<br>
retries 3                 #两次连接失败就认为是服务器不可用，也可以通过后面设置<br>
option abortonclose       #当服务器负载很高的时候，自动结束掉当前队列处理比较久的链接<br>
option redispatch<br>
maxconn 8192              #默认的最大连接数<br>
timeout connect  5000ms   #连接超时<br>
timeout client 50000ms    #客户端超时<br>
timeout server 50000ms    #服务器超时<br>
timeout tunnel 1h<br>
timeout client-fin 30s<br>
balance roundrobin        #设置默认负载均衡方式，轮询方式<br>
#balance source           #设置默认负载均衡方式，类似于nginx的ip_hash<br>
#balnace leastconn        #设置默认负载均衡方式，最小连接数<br>
listen admin_stats<br>
bind 0.0.0.0:987               #节点统计页面的访问端口<br>
mode http                       #http的7层模式<br>
option httplog                  #采用http日志格式<br>
maxconn 10                      #节点统计页面默认的最大连接数<br>
stats refresh 30s               #节点统计页面自动刷新时间<br>
stats uri /haproxy              #节点统计页面url<br>
stats realm Haproxy             #统计页面密码框上提示文本<br>
stats auth admin:admin           #设置监控页面的用户和密码:admin,可以设置多个用户名<br>
stats  admin if TRUE            #设置手工启动/禁用，后端服务器(haproxy-1.4.9以后版本)<br>
frontend transit<br>
bind *:999<br>
mode tcp<br>
default_backend hkt<br>
backend hkt<br>
mode tcp<br>
server hkt 1.1.1.1:80 check inter 30s rise 2 fall 3 maxconn 2000000<br>
frontend wtt<br>
bind *:443 ssl crt /root/ssl.pem<br>
redirect scheme https if !{ ssl_fc }<br>
mode http<br>
default_backend wtt<br>
backend wtt<br>
mode http<br>
server wtt 2.2.2.2:80 check inter 30s rise 2 fall 3 maxconn 2000000<br>
软件支持一个页面监控，默认开启，用户名和密码可以设定<br>
<img src="https://newdy.cf/post-images/1582443824051.png" alt="" loading="lazy"></p>
<p>然后如果是中转多个后端，就添加多个backend</p>
<p>如果使用ssl的话，记得要先把证书设置好</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SS/SSR/V2Ray负载均衡的方法2]]></title>
        <id>https://newdy.cf/post/ssssrv2ray-fu-zai-jun-heng-de-fang-fa-2/</id>
        <link href="https://newdy.cf/post/ssssrv2ray-fu-zai-jun-heng-de-fang-fa-2/">
        </link>
        <updated>2020-02-23T07:36:15.000Z</updated>
        <content type="html"><![CDATA[<p>上次讲了Nginx的负载，这次接着说Haproxy的负载</p>
<p>先安装：</p>
<p>yum -y install haproxy<br>
将默认的配置文件做一个备份：</p>
<p>mv /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.bak<br>
新建一个配置文件：</p>
<p>nano /etc/haproxy/haproxy.cfg<br>
写入下面的配置：</p>
<p>global<br>
chroot  /var/lib/haproxy<br>
pidfile /var/run/haproxy.pid<br>
user    haproxy<br>
group   haproxy</p>
<p>defaults<br>
mode    tcp                         #服务器默认的工作模式<br>
balance roundrobin                  #服务器默认使用的均衡模式<br>
retries 3                           #三次连接失败表示服务器不可用<br>
maxconn 5000                        #最大连接数<br>
timeout connect 500ms               #连接超时<br>
timeout client  3s                  #客户端超时<br>
timeout server  3s                  #服务器超时</p>
<p>listen WebPanel<br>
mode    http                        #这里使用HTTP模式<br>
bind    0.0.0.0:50000               #WEB服务端口<br>
stats   refresh 5s                  #自动刷新时间<br>
stats   uri  /                      #WEB管理地址<br>
stats   auth imlala:lala.im         #账号密码<br>
stats   hide-version                #隐藏版本<br>
stats   admin if TRUE               #验证通过则赋予管理权</p>
<p>listen USA<br>
bind 0.0.0.0:50001                  #服务端口<br>
server usa1 1.2.3.4:55555 check inter 500 rise 2 fall 4 weight 100   #SS/SSR服务器地址与端口<br>
server usa2 2.2.3.4:55555 check inter 500 rise 2 fall 4 weight 50    #SS/SSR服务器地址与端口</p>
<p>listen JP<br>
bind 0.0.0.0:50002                  #服务端口<br>
server jp1 3.2.3.4:55555 check inter 500 rise 2 fall 4 weight 100   #SS/SSR服务器地址与端口<br>
server jp2 4.2.3.4:55555 check inter 500 rise 2 fall 4 weight 50    #SS/SSR服务器地址与端口<br>
配置完成之后，务必关闭SELinux，否则我们无法使用systemd去正常运行HAProxy（这是一个坑）：</p>
<p>sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config<br>
setenforce 0<br>
启动HAProxy：</p>
<p>systemctl start haproxy<br>
systemctl enable haproxy</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SS/SSR/V2Ray负载均衡的方法1]]></title>
        <id>https://newdy.cf/post/ssssrv2ray-fu-zai-jun-heng-de-fang-fa-1/</id>
        <link href="https://newdy.cf/post/ssssrv2ray-fu-zai-jun-heng-de-fang-fa-1/">
        </link>
        <updated>2020-02-23T07:35:08.000Z</updated>
        <content type="html"><![CDATA[<p>有人会问，为什么需要负载均衡呢？</p>
<p>负载均衡最大的作用就是0宕机，可以做到宕机秒切换。 保证你所有的线路都能基本不掉线，这样稳定性就得到了保障。</p>
<p>还有就是，如果手里有线路优质但是带宽不大的小鸡，可以用这种方法变相提升带宽。比如套路云的新手套餐，就很适合这么玩。</p>
<p>这里介绍两种方法，第一种用HAProxy，第二种用Nginx。</p>
<p>如果需要UDP，比如玩游戏，就只能用 Nginx，因为HAProxy不支持UDP 。</p>
<p>这里负载的线路有一个要求：就是不管你是SS/SSR/V2Ray，你都必须保证用来负载的机器的加密、混淆等等都是一致的，不然是没法负载的哦。</p>
<p>这里先介绍Nginx的方法：</p>
<p>yum -y install nginx<br>
然后在Nginx的主配置文件内写一个include，因为我们需要用到stream段，这个段和http段是平级的，不能内嵌到http段使用：</p>
<p>echo &quot;include /etc/nginx/tcpconf.d/*.conf;&quot; &gt;&gt; /etc/nginx/nginx.conf<br>
创建一个存放配置文件的目录：</p>
<p>mkdir -p /etc/nginx/tcpconf.d<br>
新建一个配置文件：</p>
<p>nano /etc/nginx/tcpconf.d/proxy.conf<br>
写入如下配置：</p>
<p>stream {</p>
<pre><code>upstream imlala {
    server 1.2.3.4:55555 weight=7;
    server 2.2.3.4:55555 weight=3;
}

server {
listen 50003;
    listen 50003 udp;
    proxy_pass imlala;
}
</code></pre>
<p>}<br>
这边我使用的是weight（权重）模式，可以去掉这两个设置让Nginx默认用于轮询模式。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unraid的优点及缺点大全]]></title>
        <id>https://newdy.cf/post/unraid-de-you-dian-ji-que-dian-da-quan/</id>
        <link href="https://newdy.cf/post/unraid-de-you-dian-ji-que-dian-da-quan/">
        </link>
        <updated>2020-02-21T19:10:13.000Z</updated>
        <content type="html"><![CDATA[<p>UNRAID的介绍：</p>
<p>什么是UNRAID，UNRAID是基于LINUX slackware的RAID系统，其本质总结成一句话就是带有校验盘（即容错功能）的JBOD。</p>
<p>UNRAID的优点:</p>
<p>1.unraid有现成的很多plugin支持 支持docker 也支持 vm 虚拟机，还有现成的应用市场直接下载. 同时作为nas服务器 docker服务器 虚拟机服务器 插件 应用 等多种功能。</p>
<p>2.web界面管理，非常轻量（一个u盘加载到内存运行) ，直接samba共享，windows连接nas很方便</p>
<p>3.有现成的Deluge和Plex的docker，Linux新手也能很快运用，比Ubuntu用VNC方便很多（VNC或者teamviewer不流畅而且经常有些莫名其妙的问题）<br>
4.最重要硬盘的管理方式是随便加硬盘，可以不同大小不同速度(我爱帮助网)，最后都是一个存储池，但比windows好处只要一个硬盘做冗余就行，有硬盘坏了就从那个冗余盘，对我来说比折腾RAID可靠多了。缺点是60美元的价格。<br>
5.支持硬盘无访问自动休眠（SPINDOWN）省电，毕竟一个10/20块硬盘的家用阵列，不是每时每刻都有访问需求的。节能、降噪。<br>
6.阵列中每个硬盘容量可以不一样。</p>
<p>7.只需要一个校验盘，要求其容量是阵列里面最大的(即：容量≥阵列中任意一个硬盘)。</p>
<p>8.允许1个硬盘倒下，不影响阵列数据完整。即使第2个硬盘倒下，也只损失这个硬盘上的数据。而不会损失整个阵列数据。举例：一个阵列ABCD 4块硬盘+校验盘E。如果A-E盘中的任意一块坏了，对数据没有影响，用同容量或者更大容量（容量≤校验盘）的硬盘替换坏的硬盘即可。如果两块硬盘坏了，如A/E，那只会丢失A盘中的内容，B/C/D盘中的内容仍然可以访问，只要把盘拿出来，用LINUX LIVE CD启动，即可访问其中内容。<br>
9.扩容方便，直接往阵列里添加硬盘就可以了。唯一要求是容量≤校验盘。此外对容量没有要求（见第6点）。如果新加入的硬盘容量比校验盘大，需要先用这个硬盘替换校验盘，然后再把替换下来的校验盘作为新盘加入以增大阵列容量。</p>
<p>10.UNRAID，不仅可以快速的组磁盘阵列、快速的创建共享文件夹、快速的使用DOCKER容器跑各种服务，还可以创建各种各样的虚拟机，而且占用率极低<br>
11.使用体验比PVE好。比vmware esxi 使用简单，比黑群晖安装方便，且对硬盘要求不高</p>
<p>官网列出的Unraid的优点（tmtony翻译）</p>
<ol>
<li>unRAIDServer可以确保您的数据安全<br>
unRAID与传统RAID有所不同，原因有很多。在大多数情况下，RAID是在将文件写入RAID阵列时旋转的多个驱动器，并且数据分布在多个驱动器中。因此，即使一个文件也可以存在于多个磁盘上。<br>
unRAID中的共享网络资源可以跨越多个磁盘，但是它以与传统RAID完全不同的方式管理数据（tmtony翻译）。可以将unRAID配置为最多使用两个奇偶校验磁盘。与传统RAID一样，如果最多两个驱动器死机，这将防止数据丢失，从而确保数据安全。</li>
<li>unRAID有效<br>
unRAID可能不如传统RAID有效，但效率更高。由于所有驱动器都不会旋转以读取和写入数据，因此大大降低了功耗。<br>
unRAID对增加阵列的大小也有效。您可以添加任何大小的磁盘，即使该磁盘与其他磁盘的大小不匹配，也会以该大小增加阵列的大小。只要确保您的奇偶校验磁盘等于或大于阵列中的最大磁盘，数据就将是安全的。<br>
3.虚拟机支持<br>
unRAID具有内置的虚拟化支持，因此计算机上任何剩余的资源都可用于启动虚拟机。</li>
<li>unRAID具有出色的应用程序支持<br>
unRAID是从支持Docker的组中编译的。简而言之，Docker是一个容器平台(我爱帮助网)，允许应用程序在自己的安全环境中运行。它是目前全球数百万开发人员中最广泛使用的容器平台，它为数以千计的应用程序提供了UnRAID破解访问。<br>
5.硬件预算较低<br>
unRAID Server Pro最重要的好处之一就是它可以在常规PC硬件上运行。这意味着，只要您有适当的预算，就可以使自己的装配多么强大。如果您需要没有虚拟化或资源密集型应用程序的NAS，您甚至可以重新分配您拥有的旧计算机。</li>
</ol>
<p>unRAID Server Pro的适应场景</p>
<p>unRAID Server Pro是用于个人和小型企业的操作系统，它具有企业级功能，可让您使用应用程序，VM，存储设备和硬件的任意组合来配置计算机系统，以最大化性能和容量。<br>
突出优点<br>
简单性。柔韧性 可扩展性。模块化 Unraid使您能够使用首选的硬件，软件和操作系统来构建您一直想要的系统。<br>
控制您的数据<br>
打破单个操作系统的局限。Unraid允许您对系统资源进行分区，以存储和保护数据（tmtony翻译），运行任何应用程序和/或在隔离的环境中创建虚拟机。<br>
网络附加存储<br>
我们采用与硬件无关的方法来连接网络存储。在几乎所有具有x86 64位功能的系统上引导(我爱帮 助网)，并管理大小，速度，品牌和协议不同的磁盘阵列。按需缩放。添加更多磁盘，而无需重新平衡数据。通过运行更少的麻烦，运行更多应用程序，<br>
Application Server<br>
Unraid可使您从硬件中获得更多价值。使用任何基于Linux或Windows的x86应用程序。将应用程序放置在隔离的运行时环境中以防止冲突。通过我们的Web界面轻松控制应用程序。<br>
虚拟主机<br>
Unraid作为虚拟化主机运行，利用管理程序以安全和隔离的方式将资源划分给虚拟化来宾（tmtony翻译）。与Docker容器相比，可以为VM分配更多的资源，但仍提供隔离的访问。<br>
使您的系统专业化<br>
数字媒体特立独行者<br>
视频制作人，带有大量视频库的流媒体，媒体编辑，摄影师，音乐家和音乐收藏家使用Unraid降低了初始成本。从最少两个驱动器开始，然后一次使用一个或多个驱动器进行扩展。<br>
硬核游戏<br>
玩家也拥有媒体服务器并喜欢构建自己的自定义系统的游戏玩家使用Unraid来做所有事情而不会失去优势（tmtony翻译）。<br>
数据存储用户<br>
需要大量存储空间的设计师，3D动画师，开发人员，摄影师和其他用户使用Unraid在本地存储资产以便快速访问。与Apple Time Machine和Windows备份服务一起使用，可以从本地设备中存档大量不经常访问的数据。<br>
多操作系统用户<br>
软件工程师，游戏开发工作室，AR / VR设计师和大学实验室使用Unraid在多个平台上以及跨操作系统和设备上测试软件，并允许多个用户访问一个系统。</p>
<p>UNRAID的缺点：<br>
1.UNRAID是要授权的，一个Pro版本授权119美刀，可支持21块硬盘（7月10日的RC6版本支持24块硬盘，正好适合24盘位的机箱）。免费版本支持3块硬盘（1校验盘+2数据盘）。<br>
2. 读写速度不快，在30-40MB/S。个人认为家用够了。（有网友测试可达到70-90Mb/s左右，不同的硬件配置速度不同）</p>
<p>有网友 弄一个8盘位的服务器。软件方面决定用UnRaid系统<br>
而unRAID可以掉盘以后实时模拟故障盘上的数据</p>
<p>网友们的相关讨论</p>
<p>1 我感觉unraid还是有两把刷子的 系统非常轻量，现成的docker也很丰富，阵列设置也非常傻瓜<br>
2.玩 一样跑了Plex和PT之类的玩意 我现在觉得Docker真的很不错，我那些虚拟机太笨重了<br>
unRAID在U盘上只占用几百MB，内存也吃的很少 (我爱帮助网) 另外unRAID硬解编解码可以用8700k的核显，我发现那张1050Ti完全是浪费（不过可以Steam串流用）ESXi只要设置了初始化核显，独显直通必定Code 43报错，不知道unRAID这种基于KVM的虚拟化会不会有这个问题<br>
3.远程的话 unraid 和plex本来就都是网页图形界面管理的 本机和远程管理没区别 你就理解成unraid跟群晖差不多的一个nas操作系统 也能安装app 灵活度更高 但没有那么傻瓜而已<br>
4.docker好评，之前一直不理解，用了之后才发现让linux易用性提高了太多，本来一堆东西要装<br>
5.这个要看实时功耗，纸面并不准确。我有个朋友也是8700k做的nas，读取时，功耗44w，有下载任务的话再涨几w。<br>
plex 观看原盘负载也会增加，不过没有单独测试过。<br>
6.unraid 是挺好的方案。我是分批搞的，现在 nas 和 plex server 分开俩机器，nas负责下载和存储，pc干粗活<br>
7.unraid可以为vm和docker单独配置vlan，但我失败了，不知道问题在哪里<br>
8.请教下，unRaid能挂载 白群晖iSCSI 硬盘吗？</p>
<p>可点击链接加入群聊【Nas及矿渣交流】有更多交流和免费资源：</p>
<p>https://jq.qq.com/?_wv=1027&amp;k=5aw6p1W</p>
<p>相关扩展知识：</p>
<ol>
<li>
<p>unRAID Server nas的优点介绍及教程帮助<br>
http://www.52help.net/unraid/286.html</p>
</li>
<li>
<p>unRAIDServer 6.8.1 最新版本-unRAID NAS Server Pro 6.8.1 开心版以及保姆级安装教程帮助<br>
http://www.52help.net/unraid/266.html</p>
</li>
<li>
<p>unRAID Server-6.8.1-x86_64 汉化包<br>
http://www.52help.net/unraid/282.html</p>
</li>
<li>
<p>Unraid Server安装 apps 应用中心（Community Applications）以及apps及VMS虚拟机菜单不出现解决办法<br>
http://www.52help.net/unraid/270.html</p>
</li>
<li>
<p>unraid docker加速-修改unraid docker的镜像源（含国内网易等镜像源）<br>
http://www.52help.net/unraid/251.html</p>
</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unRAIDServer 6.8.1 最新版本-unRAID NAS Server Pro 6.8.1 开心版以及保姆级安装教程帮助]]></title>
        <id>https://newdy.cf/post/unraidserver-681-zui-xin-ban-ben-unraid-nas-server-pro-681-kai-xin-ban-yi-ji-bao-mu-ji-an-zhuang-jiao-cheng-bang-zhu/</id>
        <link href="https://newdy.cf/post/unraidserver-681-zui-xin-ban-ben-unraid-nas-server-pro-681-kai-xin-ban-yi-ji-bao-mu-ji-an-zhuang-jiao-cheng-bang-zhu/">
        </link>
        <updated>2020-02-21T18:57:29.000Z</updated>
        <content type="html"><![CDATA[<p>unraid server启动盘详细制作过程如下，总结一下主要几个关键步骤：</p>
<p>一、当然是先下载unRaidServer 6.8.1安装包</p>
<p>unRaidServer681（unRAID NAS Server Pro 6.8.1 专业版) 安装文件直接下载（无须从国外网站低速下载）国内网盘直接下载，网速快</p>
<p>外链:https://www.lanzous.com/b00z7ufjc 密码:hqb5<br>
因为云盘不支持 分卷压缩上传，所以改名了。</p>
<p>切记：下载后, 请将<br>
unRAIDServer-6.8.1-x86_64_k_fu11.A.rar 修改为 unRAIDServer-6.8.1-x86_64_k_fu11.part1.rar<br>
unRAIDServer-6.8.1-x86_64_k_fu11.B.rar 修改为 unRAIDServer-6.8.1-x86_64_k_fu11.part2.rar<br>
unRAIDServer-6.8.1-x86_64_k_fu11.C.rar 修改为 unRAIDServer-6.8.1-x86_64_k_fu11.part3.rar</p>
<p>然后打开任何一个 文件即可解压了。解压密码：52help.net</p>
<p>二、unRaidServer 6.8.1 启动优盘制作 及详细安装步骤要点，以及经验总强</p>
<p>1.尽量使用真正的优盘（U盘）（不要使用读卡器+TF卡），优盘容量要大于1G，一般选用8G 16G 即可。<br>
因为优盘只是用于启动和插件配置，其它是保存在你的机械硬盘中。<br>
2.如果你的优盘不是windows文件格式，请先将优盘(U盘）格式化 Fat32 分区，并且将U盘名称改为 UNRAID  (大写）<br>
3.如果你的优盘已经是Fat32分区格式，但有文件内容，请先清空内容<br>
4.将unRAIDServer-6.8.1-x86_64_k_fu11解压出来，将整个目录下的所有文件复制到U盘<br>
5.用管理员身份运行U盘上的 make_bootable.bat  （右键，选择用管理员身份执行）这样就可设置U盘可以启动<br>
正常你提示是选择 Y/N  选择 Y,  如果出错，则建议使用win7 系统来打开这个优盘(我爱帮助网源创)，右键管理员身份执行这个文件<br>
在win10下有部分优盘执行提示拒绝写入，但多数可以。而在win7下基本上都可以<br>
6. 将优盘插入要安装UnRaid的电脑USB接口，设置U盘启动或选择U盘启动<br>
7. 开机时可选择默认第1项（命令界面） 或第2项 （带UI界面），默认是不选择 ，2秒后自动加载第1项<br>
8. 如果正常的话，最后会显示启动完成，显示Unraid的版本号，并显示ipv4的IP地址<br>
如果是选择第2项 图形UI界面，需要输入 root 用户名，密码为空，登录后自动打开 unraid webUi 管理界面<br>
9.在其他电脑网页浏览器上(我爱帮助网源创) 输入刚才的IP地下，如http://192.168.0.114   登录这个IP, 也可直接输入http://tower （其中tower为unraid 服务器的默认名称）<br>
打开UnRaid server 管理界面（我是绑定了域名，直接用www.52help.net域名登录），进去后，就会提示激活，这时候不要选择试用及一个试用注册码</p>
<pre><code>只需要记录下来U盘的GUID：即Flash GUID即可，复制下来
</code></pre>
<p>10.在第一个页面 选择 关机按钮，把unRAID Server关机，把U盘再插回其它windows电脑，在dos命令状态<br>
使用keymaker.exe  你的flash guid号， 如  keymaker 0951-1643-3504-BB50F70D0138<br>
keymaker 0930-6545-224c-7D9B0FCA3ADC<br>
会在根目录 生成注册文件，将这个注册文件 改名为 BTRS.key  剪切到到U盘的config目录下即可</p>
<p>11.再把优盘重新插回需要使用unRaid Server的电脑，启动后，UNRAID就会显示 Pro版本了</p>
<ol>
<li>如果优盘 有多个分区，则要将所有分区删除，重新分为一个分区才行</li>
</ol>
<p>Dos下注册的步骤<br>
1.用制作 了的优盘启动<br>
2. 抄下flash guid<br>
3. 关机拔下优盘<br>
4. 将优盘插入其它电脑<br>
5. 进入dos界面（管理员身份）如win10 不行，建议win7<br>
6. 输入 keymaker 你的GUID<br>
7. 把生成的key文件复制到config目录 下</p>
<p>按以上步骤即可安装成功。非常简单</p>
<p>安装成功后的界面<br>
<img src="https://newdy.cf/post-images/1582311539932.png" alt="" loading="lazy"><br>
使用的界面<br>
<img src="https://newdy.cf/post-images/1582311646140.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311653539.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311663424.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311669736.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311674921.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311682772.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311687825.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1582311693257.png" alt="" loading="lazy"><br>
三、unRAID Server 6.8.1 版本更新内容</p>
<p>Changes</p>
<p>Version 6.8.1 2020-01-10</p>
<p>Base distro:</p>
<ul>
<li>
<p>libuv: version 1.34.0</p>
</li>
<li>
<p>libvirt: version 5.10.0</p>
</li>
<li>
<p>mozilla-firefox: version 72.0.1 (CVE-2019-17026, CVE-2019-17015, CVE-2019-17016, CVE-2019-17017, CVE-2019-17018, CVE-2019-17019, CVE-2019-17020, CVE-2019-17021, CVE-2019-17022, CVE-2019-17023, CVE-2019-17024, CVE-2019-17025)</p>
</li>
<li>
<p>php: version 7.3.13 (CVE-2019-11044 CVE-2019-11045 CVE-2019-11046 CVE-2019-11047 CVE-2019-11049 CVE-2019-11050)</p>
</li>
<li>
<p>qemu: version 4.2.0</p>
</li>
<li>
<p>samba: version 4.11.4</p>
</li>
<li>
<p>ttyd: version 20200102</p>
</li>
<li>
<p>wireguard-tools: version 1.0.20200102</p>
</li>
</ul>
<p>Linux kernel:</p>
<ul>
<li>
<p>version 4.19.94</p>
</li>
<li>
<p>kernel_firmware: version 20191218_c4586ff (with additional Intel BT firmware)</p>
</li>
<li>
<p>CONFIG_THUNDERBOLT: Thunderbolt support</p>
</li>
<li>
<p>CONFIG_INTEL_WMI_THUNDERBOLT: Intel WMI thunderbolt force power driver</p>
</li>
<li>
<p>CONFIG_THUNDERBOLT_NET: Networking over Thunderbolt cable</p>
</li>
<li>
<p>oot: Highpoint rr3740a: version v1.19.0_19_04_04</p>
</li>
<li>
<p>oot: Highpoint r750: version v1.2.11-18_06_26 [restored]</p>
</li>
<li>
<p>oot: wireguard: version 0.0.20200105</p>
</li>
</ul>
<p>Management:</p>
<ul>
<li>
<p>add cache-busting params for noVNC url assets</p>
</li>
<li>
<p>emhttpd: fix cryptsetup passphrase input</p>
</li>
<li>
<p>network: disable IPv6 for an interface when its settings is &quot;IPv4 only&quot;.</p>
</li>
<li>
<p>webgui: Management page: fixed typos in help text</p>
</li>
<li>
<p>webgui: VM settings: fixed Apply button sometimes not working</p>
</li>
<li>
<p>webgui: Dashboard: display CPU load full width when no HT</p>
</li>
<li>
<p>webgui: Docker: show 'up-to-date' when status is unknown</p>
</li>
<li>
<p>webgui: Fixed: handle race condition when updating share access rights in Edit User</p>
</li>
<li>
<p>webgui: Docker: allow to set container port for custom bridge networks</p>
</li>
<li>
<p>webgui: Better support for custom themes (not perfect yet)</p>
</li>
<li>
<p>webgui: Dashboard: adjusted table positioning</p>
</li>
<li>
<p>webgui: Add user name and user description verification</p>
</li>
<li>
<p>webgui: Edit User: fix share access assignments</p>
</li>
<li>
<p>webgui: Management page: remove UPnP conditional setting</p>
</li>
<li>
<p>webgui: Escape shell arg when logging csrf mismatch</p>
</li>
<li>
<p>webgui: Terminal button: give unsupported warning when Edge/MSIE is used</p>
</li>
<li>
<p>webgui: Patched vulnerability in auth_request</p>
</li>
<li>
<p>webgui: Docker: added new setting &quot;Host access to custom networks&quot;</p>
</li>
<li>
<p>webgui: Patched vulnerability in template.php</p>
</li>
</ul>
<p>版本变化 中文说明</p>
<pre><code> 变化
</code></pre>
<p>版本6.8.1 2020-01-10</p>
<p>发行版基础：<br>
-libuv：版本1.34.0</p>
<p>-libvirt：版本5.10.0</p>
<p>-mozilla-firefox：版本72.0.1（CVE-2019-17026，CVE-2019-17015，CVE-2019-17016，CVE-2019-17017，CVE-2019-17018，CVE-2019-17019，CVE-2019- 17020，CVE-2019-17021，CVE-2019-17022，CVE-2019-17023，CVE-2019-17024，CVE-2019-17025）</p>
<p>-php：版本7.3.13（CVE-2019-11044 CVE-2019-11045 CVE-2019-11046 CVE-2019-11047 CVE-2019-11049 CVE-2019-11050）</p>
<p>-qemu：版本4.2.0</p>
<p>-samba：版本4.11.4</p>
<p>-ttyd：版本20200102</p>
<p>-线卫工具：版本1.0.20200102</p>
<p>Linux内核：<br>
-版本4.19.94</p>
<p>-kernel_firmware：版本20191218_c4586ff（带有其他Intel BT固件）</p>
<p>-CONFIG_THUNDERBOLT：Thunderbolt支持</p>
<p>-CONFIG_INTEL_WMI_THUNDERBOLT：英特尔WMI雷电强制电源驱动器</p>
<p>-CONFIG_THUNDERBOLT_NET：通过Thunderbolt电缆联网</p>
<p>-oot：Highpoint rr3740a：版本v1.19.0_19_04_04</p>
<p>-oot：Highpoint r750：v1.2.11-18_06_26版[已恢复]</p>
<p>-等待：wireguard：版本0.0.20200105</p>
<p>管理：<br>
-为noVNC网址资产添加缓存清除参数</p>
<p>-emhttpd：修复cryptsetup密码输入</p>
<p>-网络：当接口的设置为“仅IPv4”时，禁用该接口的IPv6。</p>
<p>-webgui：管理页面：修复了帮助文本中的错别字</p>
<p>-webgui：VM设置：修复了“应用”按钮有时不起作用</p>
<p>-webgui：仪表板：无HT时显示CPU负载全宽</p>
<p>-webgui：Docker：状态未知时显示“最新”</p>
<p>-webgui：已修复：在“编辑用户”中更新共享访问权限时处理竞争情况</p>
<p>-webgui：Docker：允许为自定义桥网络设置容器端口</p>
<p>-webgui：更好地支持自定义主题（尚不完善）</p>
<p>-webgui：控制板：调整表位置</p>
<p>-webgui：添加用户名和用户描述验证</p>
<p>-webgui：编辑用户：修复共享访问分配</p>
<p>-webgui：管理页面：删除UPnP条件设置</p>
<p>-webgui：记录csrf不匹配时转义shell arg</p>
<p>-webgui：终端按钮：使用Edge / MSIE时发出不受支持的警告</p>
<p>-webgui：auth_request中的修补漏洞</p>
<p>-webgui：Docker：添加了新设置“对自定义网络的主机访问”</p>
<p>-webgui：template.php中的已修补漏洞</p>
<p>注意：使用usb3.0 usb3.1 的u盘可能不支持。建议用2.0的优盘</p>
<p>unRAID Server-6.8.1-x86_64 汉化包</p>
<ol>
<li>
<p>先下载 unRAID Server-6.8.1-x86_64 汉化包 网盘下载地址</p>
<p>外链: https://www.lanzous.com/b00z80brc  密码:e9qr</p>
</li>
<li>
<p>切记，下载后请将：</p>
<p>unRAIDServer-6.8.1-x86_64汉化包.A.rar   改为 unRAIDServer-6.8.1-x86_64汉化包.part1.rar<br>
unRAIDServer-6.8.1-x86_64汉化包.B.rar   改为 unRAIDServer-6.8.1-x86_64汉化包.part2.rar</p>
</li>
<li>
<p>然后再进行解压. 把2个汉化包文件 解压覆盖原文件即可（最好先备份旧英文版文件，以防万一）</p>
</li>
</ol>
<p>压缩包解压密码为：52help.net</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[unraid6.7.2安装]]></title>
        <id>https://newdy.cf/post/unraid672-an-zhuang/</id>
        <link href="https://newdy.cf/post/unraid672-an-zhuang/">
        </link>
        <updated>2020-02-21T18:24:15.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://newdy.cf/post-images/1582309503734.png" alt="" loading="lazy"><br>
注意 4 help 打开复制翻译 ,它就是一教程<br>
<img src="https://newdy.cf/post-images/1582309522668.png" alt="" loading="lazy"><br>
大佬说话简而言之，这里啰嗦一下<br>
格式化U盘 格式FAT32 卷标 UNRAID 大写<br>
用第一张图的第6个工具把unraid安装到U盘中<br>
<img src="https://newdy.cf/post-images/1582309546445.png" alt="" loading="lazy"><br>
将crack目录中的文件复制到U盘根目录，拔U盘，插到服务器，启动<br>
找到服务器IP，浏览器直接IP进入，按图打开，找到 Flash GUID 后面的ID<br>
<img src="https://newdy.cf/post-images/1582309577402.png" alt="" loading="lazy"><br>
用第一张图中的第5个行成key,如第一张图中的3就是。<br>
服务器关机，拔U盘插到操作电脑，把刚生成的BTRS.key复制到U盘的config文件中。完事<br>
有大佬做了视频 53，对我这小白太有用处了，https://space.bilibili.com/28457?share_medium=android&amp;share_source=more&amp;bbid=ehksHyZDIRMmHn8dYR1hVmdVJF46SXpJek14infoc&amp;ts=1573127133669</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Watchtower - 自动更新 Docker 镜像与容器]]></title>
        <id>https://newdy.cf/post/watchtower-zi-dong-geng-xin-docker-jing-xiang-yu-rong-qi/</id>
        <link href="https://newdy.cf/post/watchtower-zi-dong-geng-xin-docker-jing-xiang-yu-rong-qi/">
        </link>
        <updated>2020-02-20T13:17:14.000Z</updated>
        <summary type="html"><![CDATA[<p>前言<br>
在早前部署Awesome TTRSS时,作者在docker-compose里配置了Watchtower,于是找到 Github 官方项目研究了下,根据官方文档简单整理了一下常用参数以备用.</p>
<p>Watchtower 是一款实现自动化更新 Docker 镜像与容器的实用工具.它监控着所有正在运行的容器以及相关镜像,当检测本地镜像与镜像仓库中的镜像有差异时,会自动拉取最新镜像并使用最初部署时的参数重新启动相应的容器.</p>
]]></summary>
        <content type="html"><![CDATA[<p>前言<br>
在早前部署Awesome TTRSS时,作者在docker-compose里配置了Watchtower,于是找到 Github 官方项目研究了下,根据官方文档简单整理了一下常用参数以备用.</p>
<p>Watchtower 是一款实现自动化更新 Docker 镜像与容器的实用工具.它监控着所有正在运行的容器以及相关镜像,当检测本地镜像与镜像仓库中的镜像有差异时,会自动拉取最新镜像并使用最初部署时的参数重新启动相应的容器.</p>
<!-- more -->
<p>containrrr/watchtower</p>
<!-- more -->
<p>部署<br>
快速启动<br>
以容器的方式启动 Watch­tower</p>
<p>docker run -d <br>
--name watchtower <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower<br>
清理旧镜像<br>
镜像在更新后旧镜像标签会变为none,长期自动更新会导致过多的none镜像占用空间,加入--cleanup参数可以在每次更新后自动删除none镜像.</p>
<p>docker run -d <br>
--name watchtower <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower <br>
--cleanup<br>
指定容器更新<br>
如无需自动更新所有稳定运行的容器,可以配置仅更新指定容器,只需要在命令后加上容器名.例如只更新nginx和redis.</p>
<p>docker run -d <br>
--name watchtower <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower <br>
--cleanup <br>
nginx redis<br>
注意指定容器需填写 容器名 ,并非镜像名.由于启动容器时可能没有定义 --name 参数,请执行 docker ps 查询核对容器名.<br>
指定容器排除更新<br>
如需要更新大部分容器,而排除掉少数容器不更新,可以加上 --label=com.centurylinklabs.watchtower.enable=false 的参数.命令结尾加上不更新的容器名.例如希望自动更新所有容器,而不更新nginx和redis.</p>
<p>docker run -d <br>
--name watchtower <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
--label=com.centurylinklabs.watchtower.enable=false <br>
containrrr/watchtower <br>
--cleanup <br>
nginx redis<br>
注意指定容器需填写 容器名 ,并非镜像名.由于启动容器时可能没有定义 --name 参数,请执行 docker ps 查询核对容器名.<br>
配置自动更新频率<br>
Watch­tower 默认每 5 分钟轮询一次,可以使用以下参数配置更新的频率.</p>
<p>--interval,-i 配置更新周期,默认300秒.<br>
--schedule,-s 配置定时更新,使用Cron表达式,例如&quot;0 0 4 * * *&quot;.即每天凌晨4点更新.<br>
每小时更新一次</p>
<p>docker run -d <br>
--name watchtower <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower <br>
--cleanup <br>
-i 3600<br>
每天凌晨4点更新</p>
<p>docker run -d <br>
--name watchtower <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower <br>
--cleanup <br>
-s &quot;0 0 4 * * *&quot;<br>
手动更新<br>
使用手动更新的方式,运行一次Watch­tower容器来更新所需的容器,更新后会自动删除本次运行的Watch­tower容器.只需要加上--rm和--run-once参数即可.同时也可以配合以上指定容器或指定排除容器的参数来使用.</p>
<p>docker run --rm <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
--label=com.centurylinklabs.watchtower.enable=false <br>
containrrr/watchtower <br>
--cleanup <br>
--run-once <br>
nginx redis<br>
注意指定容器需填写 容器名 ,并非镜像名.由于启动容器时可能没有定义 --name 参数,请执行 docker ps 查询核对容器名.<br>
手动运行更新时会出现以下消息,表示正在更新,请耐心等待几分钟.</p>
<p>time=&quot;2020-02-18T03:58:24Z&quot; level=info msg=&quot;Running a one time update.&quot;<br>
随后提示找到更新镜像,停止容器,更新镜像,重启容器并移除旧镜像.至此更新完毕.</p>
<p>time=&quot;2020-02-18T04:02:45Z&quot; level=info msg=&quot;Found new xxxx/xxxx:latest image (sha256:10383f5b5720d7e1fxxxx137034c69b7f6xxxxxxafcc4e9d508b561af77)&quot;<br>
time=&quot;2020-02-18T04:02:45Z&quot; level=info msg=&quot;Stopping /xxxx (2e9ce1ebe319f3a35d80bxxxxxxxxxx6763ada155da957acb24fe76fc8a8c5) with SIGTERM&quot;<br>
time=&quot;2020-02-18T04:02:46Z&quot; level=info msg=&quot;Creating /xxxx&quot;<br>
time=&quot;2020-02-18T04:02:46Z&quot; level=info msg=&quot;Removing image sha256:ff4ee4caaa237174080c0d545xxxxxx</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Centos7.3防火墙配置]]></title>
        <id>https://newdy.cf/post/centos73-fang-huo-qiang-pei-zhi/</id>
        <link href="https://newdy.cf/post/centos73-fang-huo-qiang-pei-zhi/">
        </link>
        <updated>2020-02-20T10:55:40.000Z</updated>
        <content type="html"><![CDATA[<p>1、查看firewall服务状态<br>
systemctl status firewalld<br>
<img src="https://newdy.cf/post-images/1582196168648.png" alt="" loading="lazy"></p>
<p>2、查看firewall的状态<br>
firewall-cmd --state<br>
<img src="https://newdy.cf/post-images/1582196217057.png" alt="" loading="lazy"></p>
<p>3、开启、重启、关闭、firewalld.service服务</p>
<h1 id="开启">开启</h1>
<p>service firewalld start</p>
<h1 id="重启">重启</h1>
<p>service firewalld restart</p>
<h1 id="关闭">关闭</h1>
<p>service firewalld stop</p>
<p>4、查看防火墙规则<br>
firewall-cmd --list-all<br>
<img src="https://newdy.cf/post-images/1582196328235.png" alt="" loading="lazy"></p>
<p>5、查询、开放、关闭端口</p>
<p>复制代码</p>
<h1 id="查询端口是否开放">查询端口是否开放</h1>
<p>firewall-cmd --query-port=8080/tcp</p>
<h1 id="开放80端口">开放80端口</h1>
<p>firewall-cmd --permanent --add-port=80/tcp</p>
<h1 id="移除端口">移除端口</h1>
<p>firewall-cmd --permanent --remove-port=8080/tcp</p>
<p>#重启防火墙(修改配置后要重启防火墙)<br>
firewall-cmd --reload</p>
<h1 id="参数解释">参数解释</h1>
<p>1、firwall-cmd：是Linux提供的操作firewall的一个工具；<br>
2、--permanent：表示设置为持久；<br>
3、--add-port：标识添加的端口；</p>
]]></content>
    </entry>
</feed>