<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://newdy.cf</id>
    <title>Gridea</title>
    <updated>2020-02-17T02:37:50.896Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://newdy.cf"/>
    <link rel="self" href="https://newdy.cf/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://newdy.cf/images/avatar.png</logo>
    <icon>https://newdy.cf/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[EasyProxy-又一款有管理面板的内网穿透代理服务器]]></title>
        <id>https://newdy.cf/post/easyproxy-you-yi-kuan-you-guan-li-mian-ban-de-nei-wang-chuan-tou-dai-li-fu-wu-qi/</id>
        <link href="https://newdy.cf/post/easyproxy-you-yi-kuan-you-guan-li-mian-ban-de-nei-wang-chuan-tou-dai-li-fu-wu-qi/">
        </link>
        <updated>2020-02-17T02:11:45.000Z</updated>
        <content type="html"><![CDATA[<p>easyProxy是一款轻量级、高性能、功能最为强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理，可实现在非内网环境下如同使用vpn一样访问内网资源和设备的效果，同时支持socks5验证，gzip、snnapy压缩（节省带宽和流量）。</p>
<p>目前市面上提供类似服务的有花生壳、TeamView、GoToMyCloud等等，但要使用第三方的公网服务器就必须为第三方付费，并且这些服务都有各种各样的限制，此外，由于数据包会流经第三方，因此对数据安全也是一大隐患。<br>
支持客户端与服务端连接中断自动重连，多路传输，大大的提高请求处理速度，go语言编写，无第三方依赖。<br>
<img src="https://newdy.cf/post-images/1581905568218.png" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1581905601275.png" alt="" loading="lazy"><br>
一、简介<br>
web管理模式，可配置多条tcp、udp隧道，多个域名代理等等—-&gt; web管理模式<br>
内网多站点配合代理。—-&gt; http反向代理请求<br>
想在外网通过ssh连接内网的机器，做云服务器到内网服务器端口的映射，或者做微信公众号开发、小程序开发等—-&gt;tcp隧道模式<br>
在非内网环境下使用内网dns，或者需要通过udp访问内网机器等—-&gt;udp隧道模式<br>
在外网使用HTTP代理访问内网站点—-&gt;http代理模式<br>
搭建一个内网穿透ss，在外网如同使用内网vpn一样访问内网资源或者设备—-&gt; socks5代理模式<br>
二、特点<br>
支持gzip、snappy压缩,减小传输过程流量消耗<br>
支持多站点配置,兼容多个内网网站，可处理相互之间的跳转包含关系<br>
断线自动重连<br>
支持多路传输,提高并发<br>
跨站自动匹配替换<br>
支持tcp隧道,提升访问效率<br>
支持udp隧道<br>
支持http代理<br>
支持内网穿透sock5代理，配合proxifer可达到vpn的效果，在外网访问内网资源或者设备，同时可以设置用户名和密码验证<br>
强大的web管理界面，可方便的设置的和管理隧道<br>
支持同时开多条tcp、udp隧道等等，且只需要开一个客户端和服务端<br>
支持一个服务端，多个客户端模式<br>
三、安装方法<br>
release安装<br>
https://github.com/cnlh/easyProxy/releases</p>
<p>下载对应的系统版本即可（目前linux和windows只编译了64位的），服务端和客户端共用一个程序，go语言开发，无需任何第三方依赖</p>
<p>源码安装<br>
安装源码<br>
go get github.com/cnlh/easyProxy</p>
<p>编译（无第三方模块）<br>
go build</p>
<p>四、使用方法<br>
有两种模式：</p>
<p>1、单客户端模式，所有的隧道流量均从这个单客户端转发。</p>
<p>服务端<br>
./easyProxy -mode=webServer -tcpport=8284 -vkey=DKibZF5TXvic1g3kY<br>
名称	含义<br>
mode	运行模式<br>
vkey	验证密钥<br>
tcpport	服务端与客户端通信端口<br>
客户端<br>
./easyProxy -server=ip:port -vkey=DKibZF5TXvic1g3kY<br>
配置<br>
进入web界面，公网ip:web界面端口（默认8080），密码为123</p>
<p>2、多客户端模式，不同的隧道流量均从不同的客户端转发。</p>
<p>服务端<br>
./easyProxy -mode=webServer -tcpport=8284<br>
名称	含义<br>
mode	运行模式<br>
tcpport	服务端与客户端通信端口<br>
客户端<br>
进入web管理界面，有详细的命令</p>
<p>配置<br>
进入web界面，公网ip:web界面端口（默认8080），密码为123</p>
<p>配置文件/conf/app.conf<br>
名称	含义<br>
httpport	web管理端口<br>
password	web界面管理密码<br>
hostPort	域名代理模式监听端口<br>
TCP隧道模式<br>
场景及原理<br>
较为适用于处理tcp连接，例如ssh，同时也适用于http等，访问服务端的8024端口相当于访问内网10.1.50.202机器的4000端口，构成如下所示的隧道。<br>
<img src="https://newdy.cf/post-images/1581905662220.jpg" alt="" loading="lazy"><br>
例如：</p>
<p>背景:</p>
<p>内网机器10.1.50.203提供了web服务80端口<br>
有VPS一个,公网IP:123.206.77.88<br>
需求:</p>
<p>在家里能够通过访问VPS的8024端口访问到内网机器A的80端口</p>
<p>使用<br>
服务端<br>
./easyProxy -mode=tunnelServer -vkey=DKibZF5TXvic1g3kY -tcpport=8284 -httpport=8024 -target=10.1.50.203:80<br>
名称	含义<br>
mode	运行模式(client、server不写默认client)<br>
vkey	验证密钥<br>
tcpport	服务端与客户端通信端口<br>
httpport	外部访问端口<br>
target	目标地址，格式如上<br>
客户端<br>
./easyProxy -server=ip:port -vkey=DKibZF5TXvic1g3kY<br>
udp隧道模式<br>
场景及原理<br>
背景</p>
<p>内网机器A提供了DNS解析服务,10.1.50.210:53端口<br>
有VPS一个,公网IP:123.206.77.88<br>
需求: 在家里能够通过设置本地dns为123.206.77.88,使用内网机器A进行域名解析服务.</p>
<p>访问vps的53端口相当于访问10.1.50.210的53端口，构成如下所示的隧道。<br>
<img src="https://newdy.cf/post-images/1581905725788.png" alt="" loading="lazy"><br>
使用<br>
服务端<br>
./easyProxy -mode=udpServer -vkey=DKibZF5TXvic1g3kY -tcpport=8284 -httpport=53 -target=10.1.50.210:53<br>
名称	含义<br>
mode	运行模式(client、server不写默认client)<br>
vkey	验证密钥<br>
tcpport	服务端与客户端通信端口<br>
httpport	公网vps的访问端口<br>
target	目标地址，格式如上<br>
客户端<br>
./easyProxy -server=ip:port -vkey=DKibZF5TXvic1g3kY<br>
HTTP代理请求<br>
场景及原理<br>
较为适用于http，也就是web站点的穿透，服务端与客户端之间建立连接，服务端收到http请求后，将请求发送到客户端，客户端再执行这个请求，并将结果返回给服务端，服务端收到后再返回。特点：支持同时代理多个站点，不同站点之间有联系还可以实现匹配替换<br>
<img src="https://newdy.cf/post-images/1581905766574.png" alt="" loading="lazy"><br>
最终效果：</p>
<p>访问a.server.com和访问10.1.50.203的80端口相同<br>
访问b.server.com和访问10.1.50.202的80端口相同<br>
访问c.server.com和访问10.1.50.201的80端口相同<br>
使用<br>
服务端<br>
./easyProxy -mode=httpServer -vkey=DKibZF5TXvic1g3kY -tcpport=8284 -httpport=8024<br>
名称	含义<br>
mode	运行模式(client、server不写默认client)<br>
vkey	验证密钥<br>
tcpport	服务端与客户端通信端口<br>
httpport	代理的http端口（与nginx配合使用）<br>
客户端<br>
建立配置文件 config.json<br>
./easyProxy -server=ip:port -config=config.json -vkey=DKibZF5TXvic1g3kY<br>
名称	含义<br>
config	配置文件路径<br>
配置文件config.json<br>
{<br>
&quot;SiteList&quot;: [<br>
{<br>
&quot;host&quot;: &quot;a.ourcauc.com&quot;,<br>
&quot;url&quot;: &quot;10.1.50.203&quot;,<br>
&quot;port&quot;: 80<br>
},<br>
{<br>
&quot;host&quot;: &quot;b.ourcauc.com&quot;,<br>
&quot;url&quot;: &quot;10.1.50.202&quot;,<br>
&quot;port&quot;: 80<br>
},<br>
{<br>
&quot;host&quot;: &quot;c.ourcauc.com&quot;,<br>
&quot;url&quot;: &quot;10.1.50.203&quot;,<br>
&quot;port&quot;: 80<br>
}<br>
],<br>
&quot;Replace&quot;: 0<br>
}<br>
名称	含义<br>
SiteList	本地解析的域名列表<br>
host	域名地址<br>
url	内网代理的地址<br>
port	内网代理的地址对应的端口<br>
Replace	是否自动匹配替换（查看场景）<br>
nginx代理配置示例<br>
upstream nodejs {<br>
server 127.0.0.1:8024;<br>
keepalive 64;<br>
}<br>
server {<br>
listen 80;<br>
server_name a.ourcauc.com b.ourcauc.com c.ourcauc.com ;<br>
location / {<br>
proxy_set_header X-Real-IP $remote_addr;<br>
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>
proxy_set_header Host  $http_host;<br>
proxy_set_header X-Nginx-Proxy true;<br>
proxy_set_header Connection &quot;&quot;;<br>
proxy_pass      http://nodejs;<br>
}<br>
}<br>
域名配置示例<br>
-a	A	123.206.77.88</p>
<p>-b	A	123.206.77.88</p>
<p>-c	A	123.206.77.88</p>
<p>跨站自动匹配替换说明<br>
例如，访问：a.ourcauc.com，该页面里面有一个超链接为10.1.50.202:80,将根据配置文件自动该将url替换为b.ourcauc.com，以达到跨站也可访问的效果，但需要提前在配置文件中配置这些站点。</p>
<p>如需开启，请加配置文件Replace值设置为1</p>
<p>注意：开启可能导致不应该被替换的内容被替换，请谨慎开启</p>
<p>socks5代理模式<br>
场景及原理<br>
原理</p>
<p>主要用于socks5代理，也就是和ss类似，不过是代理内网。使用此模式时，可在非内网环境下配置本机的socks5代理（服务器ip、sock5代理端口），即可实现socks5代理，达到访问内网的网站的效果，配合proxifer等全局代理软件，即可如同使用内网vpn一样，访问内网网站，通过ssh连接内网机器等等……。<br>
<img src="https://newdy.cf/post-images/1581905816245.png" alt="" loading="lazy"><br>
使用<br>
服务端<br>
./easyProxy -mode=sock5ServerServer -vkey=DKibZF5TXvic1g3kY -tcpport=8284 -httpport=8024<br>
名称	含义<br>
mode	运行模式(client、server不写默认client)<br>
vkey	验证密钥<br>
tcpport	服务端与客户端通信端口<br>
httpport	代理的http端口（socks5连接端口）<br>
u	验证的用户名<br>
p	验证的密码<br>
说明：用户名和密码验证模式，仅部分socks5客户端支持，例如proxifer。 如需验证，在服务端命令后加上</p>
<p>-u=user -p=password<br>
即可</p>
<p>客户端<br>
./easyProxy -server=ip:port -vkey=DKibZF5TXvic1g3kY<br>
需要使用内网代理的机器<br>
配置sock5代理即可，ip为外网服务器ip，端口为httpport，即可在外网环境使用内网啦！也可使用proxifer等全局代理软件。<br>
如果设置了用户名和密码，记得填上用户名和密码</p>
<p>http代理模式<br>
场景及原理<br>
<img src="https://newdy.cf/post-images/1581905912887.png" alt="" loading="lazy"><br>
主要用于HTTP代理，区别也就是HTTP代理和sock5代理的区别。使用此模式时，可在非内网环境下配置本机的HTTP代理（服务器ip、HTTP代理端口），即可实现HTTP代理，达到访问内网的网站的效果。</p>
<p>使用<br>
服务端<br>
./easyProxy -mode=httpProxyServer -vkey=DKibZF5TXvic1g3kY -tcpport=8284 -httpport=8024<br>
名称	含义<br>
mode	运行模式(client、server不写默认client)<br>
vkey	验证密钥<br>
tcpport	服务端与客户端通信端口<br>
httpport	http代理连接端口<br>
客户端<br>
./easyProxy -server=ip:port -vkey=DKibZF5TXvic1g3kY<br>
需要使用内网代理的机器<br>
配置HTTP代理即可，ip为外网服务器ip，端口为httpport，即可在外网环境访问内网啦！<br>
数据压缩支持<br>
场景及原理<br>
由于是内网穿透，内网客户端与服务端之间的隧道存在大量的数据交换，为节省流量，加快传输速度，由此本程序支持GZIP、SNNAPY两种形式的压缩，两者差异请自行选择。</p>
<p>注意点<br>
所有模式均支持数据压缩<br>
如何使用<br>
GZIP压缩</p>
<p>在server端加上参数 -compress=gzip，例如在TCP隧道模式<br>
./easyProxy -mode tunnelServer -vkey DKibZF5TXvic1g3kY -tcpport=8284 -httpport=8024 -target=10.1.50.203:80 -compress=gzip<br>
SNAPPY压缩</p>
<p>将参数修改为snappy即可</p>
<p>操作系统支持<br>
支持Windows、Linux、MacOSX等，无第三方依赖库。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 群晖上监控插件SurveillanceStation 破解255]]></title>
        <id>https://newdy.cf/post/surveillancestation-po-jie-255/</id>
        <link href="https://newdy.cf/post/surveillancestation-po-jie-255/">
        </link>
        <updated>2020-02-17T01:25:11.000Z</updated>
        <content type="html"><![CDATA[<p>安装好群晖的监控工具后！先不要启动把这三个附件解压后<br>
<img src="https://newdy.cf/post-images/1581902779887.jpg" alt="" loading="lazy"><br>
<img src="https://newdy.cf/post-images/1581902848427.jpg" alt="" loading="lazy"><br>
sscored权限应该是 755</p>
<p>chmod 755 /var/packages/SurveillanceStation/target/sbin/sscored</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群晖存储空间损毁 Btrfs 数据恢复教程]]></title>
        <id>https://newdy.cf/post/qun-hui-cun-chu-kong-jian-sun-hui-btrfs-shu-ju-hui-fu-jiao-cheng/</id>
        <link href="https://newdy.cf/post/qun-hui-cun-chu-kong-jian-sun-hui-btrfs-shu-ju-hui-fu-jiao-cheng/">
        </link>
        <updated>2020-02-11T14:52:53.000Z</updated>
        <content type="html"><![CDATA[<p>由于囊中羞涩，reizhi 一直在使用黑群晖作为家庭存储方案。不知何故，几天前突然提示存储空间已损毁。这种情况下白群晖是可以直接联系技术支持的，无奈我只好自己想办法解决。而网络上搜索到的教程和案例都是使用 Ext4 作为文件系统，那么只需要用 UFS explorer 来修复就好了。偏偏我是用的是 Btrfs 文件系统，于是只好爬问研究。最终通过三天时间的反复尝试，成功将所有数据挽回，在此分享一下经历和经验供日后参考。</p>
<p>如果你也遇到了类似问题，完全不用急着慌张。虽然 Btrfs 相比于 Ext4 并没有任何稳定性上的优势，但经过多年的更新和改进文件系统已经比较完善，再加上 RAID 的数据保护，丢失文件的几率并不高。</p>
<p>如果你的群晖提示存储空间损毁，但 RAID 并没有异常，可以无需进行 RAID 清理。通过查看 S.M.A.R.T 状态，发现所有硬盘均处于健康状态，于是跳过这一步。接下来我们需要引导到 Ubuntu 系统并尝试挂载 RAID ，此时既可以使用原有机器，也可以将所有硬盘连接到其他机器中操作。在原机安装 Ubuntu 时请注意不要将系统安装至存有数据的硬盘。安装镜像以及教程可以直接在官网获取，这里便不再赘述了。另外由于恢复过程耗时较长，不建议使用 LiveCD 来操作。</p>
<p>安装完成后的第一件事是安装必要的工具包以及挂载 RAID，打开终端并以 root 身份（sudo -i）执行以下操作：</p>
<p>apt-get update<br>
apt-get install mdadm lvm2 btrfs-prog<br>
mdadm -Asf &amp;&amp; vgchange -ay<br>
正常完成后可以在磁盘管理中看到 RAID 阵列，但是由于文件系统损坏，此时是无法挂载的。这里会显示阵列的设备文件是 /dev/md/2 ，记住你的显示值，稍后会要用到。<br>
<img src="https://newdy.cf/post-images/1581432806246.png" alt="" loading="lazy"><br>
我们切换回终端，运行以下命令：</p>
<p>btrfs-find-root /dev/md/2 &amp;&gt; /tmp/root.txt<br>
运行过程可能需要10-30分钟，期间是没有任何回显的。等待运行完成后终端会返回命令提示符，这时我们打开 /tmp/root.txt 文件，可以看到如下内容：<br>
<img src="https://newdy.cf/post-images/1581432867060.png" alt="" loading="lazy"><br>
我们需要用到的数据是 Well block 后面的这一串数字，其后的 gen 数字越高，恢复的可能性越大。下一步使用找到的 tree root 来模拟修复，到目前为止的所有操作都不会对硬盘进行写入和修改，也不会破坏任何数据。</p>
<p>btrfs check --tree-root <block> --super <sup><br>
其中 <block> 为上一步中的数值，按 gen 数字从高到低依次尝试使用，<sup> 可以尝试0，1或2。如果 <block> 有效，运行结果末尾应当类似于以下图示：<br>
<img src="https://newdy.cf/post-images/1581432909952.png" alt="" loading="lazy"><br>
如果最后回显不是以上格式，表明这一条 <block> 无效，需要继续尝试下一条。在确认看到以上提示后，我们尝试将数据导出。</p>
<p>btrfs restore /dev/md/2 /tmp -D -v -F -i -t <sup><br>
此时仍然使用上一步中的 <block> 值，将 /tmp 改为导出目录，需要确保留有足够空间存储文件。如果文件名包含特殊符号可能导致导出中断，将目标分区格式化为 Ext3/4 即可。<br>
<img src="https://newdy.cf/post-images/1581432941261.png" alt="" loading="lazy"><br>
如果导出正常进行，会看到类似上图的提示，此处没有进度提示，可以自行前往导出目录查看。如果导出失败会给出其他提示，在确认导出分区是 Ext3/4 的情况下，则只能退回上一步尝试其他 <sup> 值。</p>
<p>到目前为止我们并没有对数据盘进行任何写入和修改操作，如果因为种种原因无法导出，或是导出过程异常中断，仍然可以通过修复原盘的方式来挽回数据。不过请注意，此步骤有可能会损坏数据，如果你不能接受任何风险，请停止执行并联系专业机构。</p>
<p>btrfs check --repair --tree-root <block> --super <sup><br>
使用之前步骤中正常回显的 <block> 及 <sup> 值进行正式修复，确认操作完成后执行：</p>
<p>btrfs rescue super-recover /dev/md/2<br>
<img src="https://newdy.cf/post-images/1581432991454.png" alt="" loading="lazy"></p>
<p>提示确认目标分区是 Btrfs 文件系统，否则会损坏数据，输入 y 确认操作。等待数秒后再次回到提示符，如果一切顺利，此时已经可以通过磁盘管理工具挂载 Btrfs 分区了。不过群晖很大几率不会识别修复后的文件系统，还是建议将数据导出后再将硬盘还原。😚</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[群晖开启 SMB3 多通道叠加网卡速度]]></title>
        <id>https://newdy.cf/post/qun-hui-kai-qi-smb3-duo-tong-dao-die-jia-wang-qia-su-du/</id>
        <link href="https://newdy.cf/post/qun-hui-kai-qi-smb3-duo-tong-dao-die-jia-wang-qia-su-du/">
        </link>
        <updated>2020-02-11T14:47:10.000Z</updated>
        <content type="html"><![CDATA[<p>不少的群晖机型都带有2个甚至更多的网卡，为了突破 1Gbps 的局域网连接速度，我们以往需要在交换机、群晖和 PC 端配置链路聚合(link aggregation)。不仅配置较为繁琐，而且额外增加了 PC 端和交换机的成本，实际普及率并不高。而自 DSM 6.1-15047 之后，群晖为我们带来了 SMB3 多通道支持，使得我们能够以及其低廉的成本享受多网卡叠加带来的速度提升。</p>
<p>要使用 SMB3.0 的多通道来叠加网卡速度，需要以下几个条件：</p>
<p>群晖带有2个或以上的相同线速的网卡，并安装 DSM 6.1-15047 及更高版本<br>
普通交换机<br>
PC 端带有2个或以上的相同线速的网卡，并安装 Windows 8/Server 2012及更高版本 OS<br>
由于群晖目前没有开放相关设置项，所以我们部分操作需要通过 SSH 来完成：</p>
<p>1.打开控制面板，依次进入：文件服务-高级设置，将最大协议改为 SMB3，点击应用<br>
<img src="https://newdy.cf/post-images/1581432465559.png" alt="" loading="lazy"><br>
2.进入：终端机和 SNMP，勾选启动 SSH 功能，点击应用<br>
<img src="https://newdy.cf/post-images/1581432503103.png" alt="" loading="lazy"><br>
3.使用 PUTTY 等软件登入群晖 SSH，输入 sudo -i 临时提权，并输入密码回车。待命令提示符由 $ 变为 # 后，执行：vi /etc/samba/smb.conf<br>
<img src="https://newdy.cf/post-images/1581432535629.png" alt="" loading="lazy"><br>
4.在文件末尾添加以下内容，完成后按 ESC，并输入 :wq 保存退出</p>
<p>server multi channel support = yes<br>
aio read size = 1<br>
aio write size = 1<br>
5.重启群晖，PC 和交换机，所有设置完成。</p>
<p>在重启完成后，PC 端使用主机名（如\homeshare）或 ip 进入一次共享，即可自动启用 SMB3 多通道了。另外也可以用管理员权限运行 PowerShell ，执行： Get-SmbMultichannelConnection 确认。<br>
<img src="https://newdy.cf/post-images/1581432576355.png" alt="" loading="lazy"><br>
如上所示，目前 PC 已连接到服务器 192.168.199.189，并且分别通过本地 ip:192.168.199.99 192.168.199.100 与远端 ip: 192.168.199.188 192.168.199.189 建立了 SMB3 多通道连接。<br>
<img src="https://newdy.cf/post-images/1581432604857.png" alt="" loading="lazy"><br>
通过复制文件也可以看出，两张网卡均有流量，并且总和超过了 1Gbps 。</p>
<p>基于 RTL8111 的 PCIE x1 网卡目前均价不过20-30块，并且对于交换机并无特殊限制，故整套解决方案成本是非常低的。除了PCIE 网卡之外，也可以使用 USB 网卡，但需要确保所有网卡线速一致，才能够启用 SMB3 多通道。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为 ESXi 添加 RTL8168/8111 及 SATA 控制器驱动]]></title>
        <id>https://newdy.cf/post/wei-esxi-tian-jia-rtl81688111-ji-sata-kong-zhi-qi-qu-dong/</id>
        <link href="https://newdy.cf/post/wei-esxi-tian-jia-rtl81688111-ji-sata-kong-zhi-qi-qu-dong/">
        </link>
        <updated>2020-02-11T14:27:41.000Z</updated>
        <content type="html"><![CDATA[<p>ESXi 是 VMware 旗下的一款硬件虚拟化产品，用于快速搭建虚拟化平台。由于其免费易用的特点，ESXi 受到了个人玩家、开发者及小型公司的广泛好评。不过也许是考虑到产品线与 Workstation 和 Fusion 有或多或少的重合，自 ESXi 5.5 版本起 VMware 移除了大量家用 PC 机的驱动，其中就包含 RTL8168/8111 网卡以及 Intel SATA 控制器。</p>
<p>不过天无绝人之路，我们仍然可以使用第三方工具 ESXi-Customizer-PS 对安装镜像进行修改，加载我们想要的驱动，从而继续正常使用。</p>
<p>在使用 ESXi-Customizer-PS 之前，我们需要先安装 VMware PowerCLI，可以在网络搜索下载。安装完成后，在这个网址下载 ESXi-Customizer-PS。</p>
<p>随后我们打开 VMware PowerCLI ，并且定位到 ESXi-Customizer-PS 所在的目录，执行：</p>
<p>##.\ESXi-Customizer-PS-v2.5.ps1 -v65 -vft -load net55-r8168,net51-r8169,sata-xahci<br>
<img src="https://newdy.cf/post-images/1581431304708.png" alt="" loading="lazy"></p>
<pre><code>随后脚本会自动连接到 VMware 下载安装镜像并加载对应的驱动。其中 net55-r8168 对应 RTL8168/8111 ，net51-r8169 对应 RTL8169 ，sata-xahci 对应常见 SATA 控制器。如果你还有特殊的硬件驱动需要加载的话，可以到 V-Front 的官方源按照硬件 id 来查找，只需在 load 后继续添加并用逗号分隔即可。
</code></pre>
<p>经过漫长的等待后，对应版本的 ESXi 安装镜像便会保存在 ESXi-Customizer-PS 同目录中。当然你也可以使用 -v60 -v55 来生成6.0或是5.5版本的安装镜像。<br>
<img src="https://newdy.cf/post-images/1581431377324.png" alt="" loading="lazy"><br>
如不清楚硬件 id ，可先引导至 Windows 并通过设备管理器查看。如图所示，这个 Intel USB 3.0 控制器的硬件 id 为：8086:A12F。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[搭建 DNS 服务解锁 Netflix]]></title>
        <id>https://newdy.cf/post/da-jian-dns-fu-wu-jie-suo-netflix/</id>
        <link href="https://newdy.cf/post/da-jian-dns-fu-wu-jie-suo-netflix/">
        </link>
        <updated>2020-02-11T13:14:06.000Z</updated>
        <content type="html"><![CDATA[<p>有观看 Netflix 习惯的朋友应该都知道，除了需要科学上网之外，IP 能够解锁 Netflix 也是正常播放的必要条件之一。不过有时因为流量原因，我们不直接使用能够解锁 NF 的服务器来播放，而是架设 DNS 服务作为其它机器的中转。这样，原本不能解锁 NF 的服务器便也可以正常播放了。不过我们今天并不细究原理，只是分享方法。</p>
<p>如果需要解锁 Netflix ，前提条件是你拥有一台能够正常观看 NF 的服务器A，以及另一台无法观看 NF 的服务器B。</p>
<p>首先我们在服务器A上运行以下代码安装 DNS 服务：</p>
<p>wget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh &amp;&amp; bash dnsmasq_sniproxy.sh -i</p>
<p>如果开启了防火墙，记得在服务器A上放行53端口的入网连接。随后在服务器B上设置 DNS 为服务器A的 ip ，以 Debian 为例：</p>
<p>如果你的服务器B是静态配置 IP，只需要修改<br>
/etc/resolv.conf 中的 nameserver 即可。如：nameserver 1.0.0.1</p>
<p>如果你的服务器B是自动获取IP，切勿修改 /etc/resolv.conf 。<br>
因为此时这个文件受到 DHCP 的影响，在每次重启后都会还原为默认值。此时我们需要编辑 /etc/dhcp/dhclient.conf ，添加：supersede domain-name-servers 1.0.0.1; 来手动指派 DNS 地址。</p>
<p>最后重启服务器B的网络即可：/etc/init.d/networking restart</p>
<p>上述例子中的 1.0.0.1 仅用于示范，实际使用时需要填写服务器A的公网 ip 地址。</p>
<p>此时再使用服务器B，Netflix 已经可以正常播放了。并且 DNS 解锁只需要消耗服务器A非常少的流量，适用于流量较少无法直接使用服务器A来观看 NF 的情况。为了提高系统安全性，还可以自行配置 iptables 来限制53端口的入网 ip 地址，在此便不细谈了。</p>
]]></content>
    </entry>
</feed>