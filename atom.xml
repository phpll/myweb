<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://book.baidv.win</id>
    <title>Gridea</title>
    <updated>2020-03-24T14:26:59.679Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://book.baidv.win"/>
    <link rel="self" href="https://book.baidv.win/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://book.baidv.win/images/avatar.png</logo>
    <icon>https://book.baidv.win/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[acme.sh 自动更新 RSA、ECC 双证书实践]]></title>
        <id>https://book.baidv.win/post/acmesh-zi-dong-geng-xin-rsaecc-shuang-zheng-shu-shi-jian/</id>
        <link href="https://book.baidv.win/post/acmesh-zi-dong-geng-xin-rsaecc-shuang-zheng-shu-shi-jian/">
        </link>
        <updated>2020-03-14T08:10:38.000Z</updated>
        <content type="html"><![CDATA[<p>不知不觉，一年的通配符证书就快到期了。作为一名技术人员，我是不准备续费了。恰巧知道一个 acme.sh 的项目，它是一个实现 ACME 协议的客户端，能够向支持 ACME 协议的 CA 申请证书（如 Letsencrypt）。 最重要的是它对接了大多数的域名服务商，能够通过域名服务商提供的 API，自动的添加 DNS 验证记录进行全自动颁发证书，还可以模拟 HTTP 服务器进行文件验证。so，不管你的证书期限是 90 天，还是更短，再也不用担心证书过期的问题了。</p>
<p>至于 ACME 协议是什么？Automatic Certificate Management Environment 自动化证书管理环境，通过它我们可以实现证书的自动申请以及部署，可以大大的节省人员的管理及额外的配置工作。</p>
<p>ACME 的通信过程通过一系列的 API 进行，你可以通过类似 https://example.com/directory 获取可以请求的 API 列表，如 Letsencrypt。当然再通信过程中采取了很多的安全措施，如在 RFC 文档中你可能会看 JWT、JWS、JOSE、JWK、reply-nonce等名词，看起来就陌生。如果你不是技术人员，也大可不必去研究那些东西，知道怎么用就行。</p>
<p>安装 acme.sh<br>
好了，废话不多说。acme.sh 下载非常的简单，官方提供了 2 中方式：</p>
<p>通过执行在线脚本安装：</p>
<p>$ curl https://get.acme.sh | sh</p>
<h1 id="或者">或者</h1>
<p>$ wget -O -  https://get.acme.sh | sh<br>
通过 git 安装：</p>
<p>git clone https://github.com/Neilpang/acme.sh.git<br>
cd ./acme.sh<br>
./acme.sh --install<br>
在安装的过程中，做了 3 件事：</p>
<p>复制 acme.sh 到你的 HOME 目录（$HOME）：~/.acme.sh/。之后所有生成的证书也会放在这里。<br>
创建别名：acme.sh=~/.acme.sh/acme.sh。<br>
创建 cron 每日任务去检查是否有证书需要更新。 如： 0 0 * * * &quot;/home/user/.acme.sh&quot;/acme.sh --cron --home &quot;/home/user/.acme.sh&quot; &gt; /dev/null<br>
使用 acme.sh<br>
如何使用？acme.sh 的功能非常的强大，使用方式确非常的简单。提醒，该脚本需要在你的服务器下执行。官方地址：How-to-issue-a-cert。</p>
<p>关于 ECC 证书，你只需要再末尾添加 --keylength ec-256。如：</p>
<p>$ acme.sh --issue -w /home/wwwroot/example.com -d example.com -d www.example.com --keylength ec-256<br>
可选长度有：</p>
<p>ec-256 (prime256v1, “ECDSA P-256”)<br>
ec-384 (secp384r1, “ECDSA P-384”)<br>
ec-521 (secp521r1, “ECDSA P-521”, which is not supported by Let’s Encrypt yet.)<br>
申请证书<br>
单域名</p>
<p>$ acme.sh --issue -d example.com -w /home/wwwroot/example.com<br>
多域名</p>
<p>$ acme.sh --issue -d example.com -d www.example.com -d cp.example.com -w /home/wwwroot/example.com<br>
这里的 -w 指定的是 web 服务器根目录，请确保有写入权限。example.com 就是你要签发的域名，建议主域放在第一个。颁发好的证书会放在 ~/.acme.sh/example.com/。证书将会每 60 天自动更新。</p>
<p>注意：这里仅申请颁发证书，之后还有安装步骤。当然这些步骤均可实现自动化。指定 web 根目录是为了写入验证文件，故请保证根目录的文件可以通过 URL 访问到。</p>
<p>Standalone 模式<br>
这个模式会自己启动一个 HTTP/HTTPS 的服务器，供 CA 进行域名验证。所以，你需要确保 80⁄443 端口是没有被占用的。</p>
<h1 id="确保你的-80-端口未被占用">确保你的 80 端口未被占用</h1>
<p>$ acme.sh  --issue  -d example.com  --standalone</p>
<h1 id="当然你也可以指定端口但前提是你会通过代理或负载均衡转发到该端口">当然你也可以指定端口，但前提是你会通过代理或负载均衡转发到该端口。</h1>
<h1 id="因为-letsencrypt-可只会访问-80-端口哦">因为 letsencrypt 可只会访问 80 端口哦。</h1>
<p>$ acme.sh  --issue  -d example.com  --standalone --httpport 88<br>
当然还有 --tls 模式，使用 443 端口。</p>
<p>Apache/Nginx 模式<br>
这个模式会检查 apache/nginx 现有的配置。在证书颁发成功后，自动的更改配置文件，达到自动申请自动部署的目的，非常的方便：</p>
<p>$ acme.sh  --issue  -d example.com  --apache<br>
$ acme.sh  --issue  -d example.com  --nginx<br>
DNS 手动模式</p>
<p>$ acme.sh --issue --dns -d example.com -d www.example.com -d cp.example.com<br>
会有类似以下信息：</p>
<p>Add the following txt record:<br>
Domain:_acme-challenge.example.com<br>
Txt value:9ihDbjYfTExAYeDs4DBUeuTo18KBzwvTEjUnSwd32-c</p>
<p>Add the following txt record:<br>
Domain:_acme-challenge.www.example.com<br>
Txt value:9ihDbjxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</p>
<p>Please add those txt records to the domains. Waiting for the dns to take effect.<br>
你需要手动添加如上域名记录。</p>
<p>如果你需要更新证书，请执行：</p>
<p>$ acme.sh --renew -d example.com<br>
DNS API模式<br>
通过域名服务商提供的 API 模式，进行动态的添加 DNS 记录，实现自动证书更新及部署。这也是本博客采用的方式（未采用 Nginx 方式也是有原因的）。</p>
<p>DNS API支持列表，涵盖了国内外主流的域名服务商。具体的使用方法你需要根据服务商进行不同设置 How to use DNS API。</p>
<p>混合模式<br>
该模式下，为每个域名指定不同的验证方式，但 example.com 和 www.example.com 必须在同一根目录。</p>
<p>$ acme.sh  --issue  <br>
-d example.com -d www.example.com -w /home/wwwroot/ <br>
-d bb.com  --dns dns_cf <br>
-d cc.com  --apache <br>
-d dd.com  -w /home/wwwroot/dd.com<br>
安装证书<br>
再颁发证书之后，我们可能需要将证书拷贝到指定位置。那么我们需要使用到 --install-cert 命令，请尽量避免手动拷贝证书。</p>
<h1 id="apache">Apache</h1>
<p>$ acme.sh --install-cert -d example.com <br>
--cert-file      /path/to/certfile/in/apache/cert.pem  <br>
--key-file       /path/to/keyfile/in/apache/key.pem  <br>
--fullchain-file /path/to/fullchain/certfile/apache/fullchain.pem <br>
--reloadcmd     &quot;service apache2 force-reload&quot;</p>
<h1 id="nginx">Nginx</h1>
<p>$ acme.sh --install-cert -d example.com <br>
--key-file       /path/to/keyfile/in/nginx/key.pem  <br>
--fullchain-file /path/to/fullchain/nginx/cert.pem <br>
--reloadcmd     &quot;service nginx force-reload&quot;<br>
这里会将私钥、证书、证书链拷贝到指定位置，成功后执行 --reloadcmd 命令。请确保有执行这些命令的权限。</p>
<p>当然你也不用担心证书更新的问题，在证书 60 天之后，会自动更新，更新后就会执行 --reloadcmd 的命令。</p>
<p>这里还有一些 hook 功能，请查看帮助 $ acme.sh -h，如，--renew-hook（每次证书成功更新后执行的命令）等。</p>
<p>更新证书<br>
使用该工具的应该都是冲着其强大的自动更新部署功能来的。当然，如果你想手动更新：</p>
<h1 id="rsa">RSA</h1>
<p>$ acme.sh --renew -d example.com --force</p>
<h1 id="ecc">ECC</h1>
<p>acme.sh --renew -d example.com --force --ecc<br>
全自动更新<br>
为了实现全自动更新证书，我们需要添加一个 --renew-hook 的命令，它的作用就是能够在证书成功颁发后执行命令。</p>
<p>如：</p>
<p>$ acme.sh --issue --dns dns_ali -d example.com -d www.example.com -k ec-256 <br>
--renew-hook &quot;acme.sh --install-cert -d example.com --ecc <br>
--key-file       /path/to/keyfile/in/nginx/key.pem <br>
--fullchain-file /path/to/fullchain/nginx/cert.pem <br>
--reloadcmd      &quot;service nginx force-reload&quot;&quot;<br>
解读，这里使用 ali_dns 为 example.com 和 www.example.com 颁发 ecc 证书。在证书到期前 30 天，acme.sh 将再次执行这条命令进行证书的更新。更新后执行 --renew-hook 将证书安装到指定地方 /path/to/keyfile/in/nginx/，安装好之后会执行 --reloadcmd 命令，让 nginx 重新加载证书。这样就完成了证书的自动更新，不过首次证书颁发后，需要你进行证书的安装。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Github Webhooks 完美自动化部署教程]]></title>
        <id>https://book.baidv.win/post/github-webhooks-wan-mei-zi-dong-hua-bu-shu-jiao-cheng/</id>
        <link href="https://book.baidv.win/post/github-webhooks-wan-mei-zi-dong-hua-bu-shu-jiao-cheng/">
        </link>
        <updated>2020-03-08T07:25:42.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://book.baidv.win/post-images/1583652416269.jpg" alt="" loading="lazy"><br>
前言<br>
之前使用GitHub Actions可以在提交代码后自动上传到腾讯云COS存储桶,实现静态网站完美自动化部署.那么非静态的网站或者项目需要自动化部署到VPS服务器上就可以使用GitHub Webhooks来实现.作为纯属新手来说,网上查阅了十几篇相关教程,都没法部署成功,最后总算找到了问题关键点,决定整理成文章分享出来,希望能帮助到新手用户.</p>
<p>Webhook支持php,js等多种方式,可以实现简单的部署,也可以实现复杂的自动化构建等功能,本文介绍适合新手用户的php方式,来自动化部署网站.<br>
Webhook简单原理<br>
对于入门新手来说,Webhook可以理解为当你在本地完成代码工作后,Push提交到GitHub,GitHub检测到Push后,使用Webhook发送一条命令到你的VPS服务器上的Webhook.php文件,服务器检测到命令后根据webhook.php中的配置在服务器上执行Pull命令,同步GitHub上的代码到服务器.实现了简单的自动化部署工作.节省了你再次上传至服务器的多余操作.</p>
<p>部署流程<br>
启用shell_exec<br>
编辑php.ini</p>
<p>vi /usr/local/php/etc/php.ini<br>
查找shell_exec,在disable_functions中删除shell_exec字段.<br>
<img src="https://book.baidv.win/post-images/1583652514268.jpg" alt="" loading="lazy"><br>
重启php.ini保存设置</p>
<p>/etc/init.d/php-fpm restart<br>
配置站点目录权限<br>
由于Webhook的推送请求是通过http/https方式发送至服务器,根据webhook.php中的命令执行git pull的实为运行php的用户,根据以下命令可以查执行php用户为www.</p>
<p>ps aux | grep php<br>
确保仓库所在的站点目录所有者为www</p>
<p>chown -R www:www /home/wwwroot<br>
切换为www账户<br>
以root账户登陆服务器,修改www的登录权限.</p>
<p>vi /etc/passwd<br>
找到</p>
<p>www❌1003:1003::/home/www:/sbin/nologin<br>
修为改</p>
<p>www❌1003:1003::/home/www:/bin/bash<br>
为www创建ssh公钥<br>
切换为www登陆</p>
<p>su www<br>
创建ssh公钥</p>
<p>ssh-keygen -t rsa</p>
<p>获取你的公钥id_rsa.pub</p>
<p>cat /home/www/.ssh/id_rsa.pub</p>
<p>登陆GitHub配置ssh公钥<br>
登陆GitHub - 进入仓库 - Settings - Deploy keys - Add Deploy keys<br>
粘贴刚才创建的公钥<br>
<img src="https://book.baidv.win/post-images/1583652574339.jpg" alt="" loading="lazy"><br>
首次git clone仓库<br>
验证ssh公钥配置成功</p>
<p>ssh -T git@github.com</p>
<p>首次clone仓库成功</p>
<p>git clone git@github.com:xxxxxx/xxxxxxx.git</p>
<p>配置webhook.php<br>
在项目网站根目录创建webhook.php获得外网链接为https://yourdoamin.com/webhook.php<br>
粘贴以下代码,只需要更改keySecret和wwwRoot即可.</p>
<?php

// 自行创建一个验证密码
$keySecret = 'xxxxxx';

// 修改为你自己的仓库绝对路径
$wwwRoot = [
    '/home/wwwroot/xxxx',
];

// 保存运行脚本的日志
$logFile = 'log/webhook.log';

// 执行git命令
$gitCommand = 'git pull';

// 判断是否开启秘钥认证(已实现gitee和github)
if (isset($keySecret) && !empty($keySecret)) {
    list($headers, $gitType) = [[], null];
    foreach ($_SERVER as $key => $value) {
        'HTTP_' == substr($key, 0, 5) && $headers[str_replace('_', '-', substr($key, 5))] = $value;
        if (empty($gitType) && strpos($key, 'GITEE') !== false) {
            $gitType = 'GITEE';
        }
        if (empty($gitType) && strpos($key, 'GITHUB') !== false) {
            $gitType = 'GITHUB';
        }
    }
    if ($gitType == 'GITEE') {
        if (!isset($headers['X-GITEE-TOKEN']) || $headers['X-GITEE-TOKEN'] != $keySecret) {
            die('GITEE - 请求失败，秘钥有误');
        }
    } elseif ($gitType == 'GITHUB') {
        $json_content = file_get_contents('php://input');
        $signature = "sha1=" . hash_hmac('sha1', $json_content, $keySecret);
        if ($signature != $headers['X-HUB-SIGNATURE']) {
            die('GITHUB - 请求失败，秘钥有误');
        }
    } else {
        die('请求错误，未知git类型');
    }
}

!is_array($wwwRoot) && $wwwRoot = [$wwwRoot];
foreach ($wwwRoot as $vo) {
    $shell = sprintf("cd %s && git pull 2>&1", $vo);
    $output = shell_exec($shell);
    $log = sprintf("[%s] %s \n", date('Y-m-d H:i:s', time()) . ' - ' . $vo, $output);
    echo $log;
    file_put_contents($logFile, $log, FILE_APPEND);
}
GitHub Webhooks配置
登陆GitHub - 进入仓库 - Settings - Webhooks - Add webhook
Payload URL 输入刚才获取的webhook.php的外网链接.
Content type 保持默认
Secret 输入刚才配置webhook.php创建的验证密码
Add webhook 完成创建
![](https://book.baidv.win/post-images/1583652656005.jpg)
恢复关闭www登陆
exit退出www登陆切回root,在次关闭www登陆.

vi /etc/passwd
恢复为

www:x:1003:1003::/home/www:/sbin/nologin
自动化部署成功
本地push代码到GitHub后,可以看到返回信息提示服务器pull成功.
![](https://book.baidv.win/post-images/1583652683115.jpg)

关键点和相关错误
权限
网上很多教程都没有提到权限问题,所以对于新手小白来说,就会不知道为什么不成功.而少数提到权限的教程,也没有非常详细指导用户如何配置.所以如果部署有问题,请检查权限问题,新手用户可以严格按照本教程先部署成功,在来自行修改你需要的配置.

webhook.php
webhook.php的代码网上也有很多种,有些能用有些无法使用,本文提供的是经过测试可用的,大家也可以自行搜索或者编辑.

Service Timeout
当遇到push大量代码时,服务器pull需要更长的时间,所以webhook返回给GitHub的信息如下图会出现Service Timeout超时错误,但实际上服务器也成功执行了pull,你可以登陆服务器检查来确认,同时也可以根据你的项目实际情况自行修改webhook.php执行配置.
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[配置 Nginx 和 frps 共存 80/443 端口及泛域名支持教程]]></title>
        <id>https://book.baidv.win/post/pei-zhi-nginx-he-frps-gong-cun-80443-duan-kou-ji-fan-yu-ming-zhi-chi-jiao-cheng/</id>
        <link href="https://book.baidv.win/post/pei-zhi-nginx-he-frps-gong-cun-80443-duan-kou-ji-fan-yu-ming-zhi-chi-jiao-cheng/">
        </link>
        <updated>2020-03-08T06:13:07.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://book.baidv.win/post-images/1583648139451.jpg" alt="" loading="lazy"><br>
前言<br>
常规情况下frps服务器端会占用80和443端口,为内网设备提供穿透,实现用户可以使用域名无端口访问内网设备.而在已经部署nginx的服务器上,由于nginx已经占用80和443端口,frps的HTTP和HTTPS需另外选择端口,可以通过nginx的反向代理配置让frps提供的穿透服务也能够使用80和443端口,实现nginx和frps共存.同时配置支持泛域名反向代理.</p>
<p>此方案适合个人用户搭建frps,国内服务器也可备案自己的域名,配置泛域名的反向代理及证书,可以方便快速的使用任何二级域名来穿透内网的各项服务.<br>
此方案不适合公开提供服务的frps服务器,由于公开服务,用户使用的是自己的域名,无法为各用户分别配置反向代理.但如果你提供的frps支持subdomain泛域名,已经为用户提供了二级或三级域名使用,也可以使用本方案,但用户就无法使用自己的域名.所以此方案并不推荐用于公共frp服务.</p>
<p>方案介绍</p>
<p>常规frps提供80和443端口的穿透,当外网访问域名时,frps会将80和443端口穿透到内网设备,由内网设备来处理80和443端口的请求.例如HTTPS的强制跳转,伪静态,证书等请求都由内网设备来处理.一些成熟的服务,例如群晖DSM,Web Station以及各套件都能够很好的提供服务,而另外一些服务,例如某些docker容器,部分路由器管理端,可能仅仅提供了HTTP端口,想要使用HTTPS还得借助另外的反向代理服务,相对会更加麻烦.</p>
<p>内网设备及服务可无需HTTPS支持,frpc.ini也只需要配置HTTP穿透到服务器.当外网访问域名时,收到请求的Nginx会根据泛域名配置,强制跳转到HTTPS,同时Nginx会提供SSL安全证书支持,然后Nginx会反向代理到frps的HTTP端口,在由frps穿透回内网获取信息返回给外网用户.</p>
<p>经过一段时间的使用,两种方案各有利弊,还是需要根据实际使用场景来选择.例如群晖NAS官方的DSM,各套件和服务可以使用上文第一种独立frps方案,由群晖来处理Web前端和SSL证书.如果使用一些docker容器服务,本身仅只支持HTTP,那么可以选择nginx和frps共存的方案,让nginx反向代理来支持HTTPS和SSL证书.<br>
方案配置<br>
frps.ini配置<br>
由于nginx占用80/443端口,frps.ini中的 vhost_http_port 和 vhost_https_port 请更换为其他端口.<br>
subdomain_host 根据需求可选配置泛域名,或者注释删除此参数使用自定义域名.<br>
frpc.ini配置<br>
如果 frps.ini 配置了 subdomain_host 泛域名,那么 frpc.ini 中域名参数需使用 subdomain = xx 仅填写二级域名主机头即可,不要填写完整域名.<br>
<img src="https://book.baidv.win/post-images/1583648249353.jpg" alt="" loading="lazy"><br>
如果 frps.ini 没有配置 subdomain_host泛域名,那么 frpc.ini 中域名参数需使用 custom_domains = xx.xxx.com 需填写完整的域名.<br>
<img src="https://book.baidv.win/post-images/1583648269468.jpg" alt="" loading="lazy"><br>
nginx配置<br>
proxy_pass http://127.0.0.1:1234; 中的 HTTP ,请勿写成 HTTPS .<br>
proxy_pass http://127.0.0.1:1234; 中 1234 端口为 frps 的 HTTP 端口.<br>
proxy_set_header Host $host:80; 注意需加上80端口,否则会无限循环301跳转,导致网页打不开提示重定向次数过多ERR_TOO_MANY_REDIRECTS.</p>
<p>server {<br>
listen 80;<br>
server_name *.yourdomain.com;<br>
return 301 https://<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>h</mi><mi>o</mi><mi>s</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">host</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">o</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span></span></span></span>request_uri;<br>
}</p>
<p>server {<br>
listen 443 ssl http2;<br>
server_name *.yourdomain.com;</p>
<pre><code>ssl_certificate /usr/local/nginx/conf/ssl/yourdomain.com.crt;
ssl_certificate_key /usr/local/nginx/conf/ssl/yourdomain.com.key;

client_max_body_size 50m; 
client_body_buffer_size 256k;
client_header_timeout 3m;
client_body_timeout 3m;
send_timeout 3m;
proxy_connect_timeout 300s; 
proxy_read_timeout 300s; 
proxy_send_timeout 300s;
proxy_buffer_size 64k; 
proxy_buffers 4 32k; 
proxy_busy_buffers_size 64k;
proxy_temp_file_write_size 64k; 
proxy_ignore_client_abort on; 

location / {
    proxy_pass http://127.0.0.1:1234;
    proxy_redirect off;
    proxy_set_header Host $host:80;
    proxy_ssl_server_name on;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[让你的黑群晖更加完美，用M.2 NVME SSD做缓存]]></title>
        <id>https://book.baidv.win/post/rang-ni-de-hei-qun-hui-geng-jia-wan-mei-yong-m2-nvme-ssd-zuo-huan-cun/</id>
        <link href="https://book.baidv.win/post/rang-ni-de-hei-qun-hui-geng-jia-wan-mei-yong-m2-nvme-ssd-zuo-huan-cun/">
        </link>
        <updated>2020-03-01T05:18:42.000Z</updated>
        <content type="html"><![CDATA[<p>黑群晖一直以来有一个不完美的点就是无法使用缓存功能，目前使用国外大神做的这个补丁已经可以完美解决这个问题</p>
<p>一、下载安装脚本<br>
https://github.com/padavan01/lede/blob/master/libNVMEpatch.zip</p>
<p>二、不管你用FTP也好， DSM文件管理器也好， 把这个libNVMEpatch.sh 拷进你的黑群晖里， 比如， copy 进共享文件夹 DATA</p>
<p>三、SSH登录后使用脚本<br>
sudo -i<br>
找到你的共享文件夹比如DATA， 我的在/volume1/DATA</p>
<p>cd /usr/local/etc/rc.d/<br>
cp /volume1/DATA/libNVMEpatch.sh .<br>
chmod 755 libNVMEpatch.sh<br>
退出SSH</p>
<p>注意这里libNVMEpatch.sh在rc.d目录下， 已经成了一个自启动执行文件， 但其实这主要是防止一些小版本升级不小心改到了Nvme驱动二进制文件， 把patch覆盖了。 如果你能忍住不升级， 只执行一次也是可以的</p>
<p>接下来就是重启黑群， 再次开机后，登陆DSM，打开“存储空间管理员”， 可以看到HDD/SSD栏下面， 赫然已经认出了两块Nvme缓存设备！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[snmp对接爱快跨三层应用功能 --- J35/J50 ]]></title>
        <id>https://book.baidv.win/post/snmp-dui-jie-ai-kuai-kua-san-ceng-ying-yong-gong-neng-j35j50/</id>
        <link href="https://book.baidv.win/post/snmp-dui-jie-ai-kuai-kua-san-ceng-ying-yong-gong-neng-j35j50/">
        </link>
        <updated>2020-02-27T10:33:39.000Z</updated>
        <content type="html"><![CDATA[<p>一、介绍<br>
在跨三层设备的环境下，路由获取三层设备下的MAC地址一般为三层设备wan口的MAC地址，针对这种情况，爱快推出了跨三层应用功能，主要解决获取三层下的MAC地址及web认证问题<br>
本文介绍下爱快与J50交换机之间连接后，具体需要怎么设置</p>
<p>二、网络拓扑<br>
<img src="https://book.baidv.win/post-images/1582799650812.png" alt="" loading="lazy"><br>
三、具体配置<br>
1：爱快路由配置步骤：<br>
①：网络设置--静态路由，添加一条回指路由，指向J50内网设备</p>
<figure data-type="image" tabindex="1"><img src="https://book.baidv.win/post-images/1582799734596.png" alt="" loading="lazy"></figure>
<p>②：应用工具--跨三层应用，开启服务</p>
<figure data-type="image" tabindex="2"><img src="https://book.baidv.win/post-images/1582799739233.png" alt="" loading="lazy"></figure>
<p>注：由于三层设备还未开启SNMP服务，所以这里会显示状态为异常，三层配置成功后会自动检测成功</p>
<p>功能服务：勾选开启<br>
功能状态：自动检测工作状态，检测间隔时间为5-10S<br>
检测异常时，说明配置路由或三层设备的配置不一致<br>
检测正常时，说明功能可以正常使用<br>
SNMP服务器IP：J50的上联口iP地址，这里填写192.168.15.248<br>
SNMP服务监听端口：默认为161，如无特殊需求可不修改<br>
SNMP协议版本：需和J50配置一致，这里选择V2<br>
团体名：需要和J50配置的团体名一致，如无特殊需求可不修改<br>
2：IK-J50配置步骤：<br>
①：配置vlan100、vlan200，指定接口10为access上联口，vid为100，指定接口20为access下联口，vid为200<br>
<img src="https://book.baidv.win/post-images/1582799758999.png" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="3"><img src="https://book.baidv.win/post-images/1582799776939.png" alt="" loading="lazy"></figure>
<p>②：配置vlan100的IP为192.168.15.248，vlan200的IP为192.168.200.1<br>
<img src="https://book.baidv.win/post-images/1582799836027.png" alt="" loading="lazy"><br>
<img src="https://book.baidv.win/post-images/1582799843132.png" alt="" loading="lazy"><br>
③：开启DHCP服务端，配置地址池、租约和DNS<br>
<img src="https://book.baidv.win/post-images/1582799903233.png" alt="" loading="lazy"><br>
<img src="https://book.baidv.win/post-images/1582799909374.png" alt="" loading="lazy"><br>
④：配置静态路由</p>
<figure data-type="image" tabindex="4"><img src="https://book.baidv.win/post-images/1582799956221.png" alt="" loading="lazy"></figure>
<p>⑤：开启SNMP服务，同时配置SNMP版本<br>
<img src="https://book.baidv.win/post-images/1582799963324.png" alt="" loading="lazy"><br>
⑥：配置SNMP团体名及访问规则：<br>
<img src="https://book.baidv.win/post-images/1582799996351.png" alt="" loading="lazy"><br>
四、最终效果展示<br>
跨三层应用界面：</p>
<figure data-type="image" tabindex="5"><img src="https://book.baidv.win/post-images/1582800053303.png" alt="" loading="lazy"></figure>
<p>三层下电脑详情：<br>
<img src="https://book.baidv.win/post-images/1582800057552.png" alt="" loading="lazy"><br>
爱快终端监控显示：<br>
<img src="https://book.baidv.win/post-images/1582800083530.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SNMP（V1/V2/V3）配置举例及配置]]></title>
        <id>https://book.baidv.win/post/snmpv1v2v3pei-zhi-ju-li-ji-pei-zhi/</id>
        <link href="https://book.baidv.win/post/snmpv1v2v3pei-zhi-ju-li-ji-pei-zhi/">
        </link>
        <updated>2020-02-27T03:14:20.000Z</updated>
        <content type="html"><![CDATA[<p>SNMPv1和SNMPv2c配置举例：<br>
SNMPv1和SNMPv2c的工作原理基本一致，要求配置的命令也是一致的，下面是SNMPv1和SNMPv2配置举例。<br>
1、配置Switch的接口IP地址，使其和网管站之间路由可达<br>
<HUAWEI> system-view<br>
[HUAWEI] sysname Switch<br>
[Switch] vlan 100<br>
[Switch-vlan100] quit<br>
[Switch] interface gigabitethernet 0/0/1<br>
[Switch-GigabitEthernet0/0/1] port link-type hybrid<br>
[Switch-GigabitEthernet0/0/1] port hybrid pvid vlan 100<br>
[Switch-GigabitEthernet0/0/1] port hybrid untagged vlan 100<br>
[Switch-GigabitEthernet0/0/1] quit<br>
[Switch] interface vlanif 100<br>
[Switch-Vlanif100] ip address 10.1.2.1 24<br>
[Switch-Vlanif100] quit<br>
2、 配置Switch的SNMP版本<br>
[Switch] snmp-agent sys-info version v1    //snmp-agent sys-info version v2c表示配置为snmpv2c的版本<br>
3、 配置团体名<br>
[Switch] snmp-agent community write adminnms2<br>
4、 配置告警主机<br>
[Switch] snmp-agent target-host trap address udp-domain 10.1.1.2 params securityname adminnms2        //params securityname表示在网管侧显示的用户安全名<br>
对于SNMPv1和SNMPv2c版本，不需要通过securityname参数的校验，网管可以接收所有告警主机发送的告警信息。该参数主要用来区分在同一个IP地址创建了多个告警主机场景下的多个告警主机</p>
<p>上面的配置为SNMPv1/SNMPv2c必须配置的选项，针对其他的配置，都是按照需求来进行，比如限制网管对设备的管理权限。</p>
<h1 id="配置acl使nms2可以管理交换机nms1不允许管理交换机">配置ACL，使NMS2可以管理交换机，NMS1不允许管理交换机。</h1>
<p>[Switch] acl 2001<br>
[Switch-acl-basic-2001] rule 5 permit source 10.1.1.2 0.0.0.0<br>
[Switch-acl-basic-2001] rule 6 deny source 10.1.1.1 0.0.0.0<br>
[Switch-acl-basic-2001] quit</p>
<h1 id="配置mib视图限制nms2可以管理交换机上除rmon之外的节点">配置MIB视图，限制NMS2可以管理交换机上除RMON之外的节点。</h1>
<p>[Switch] snmp-agent mib-view excluded allextrmon 1.3.6.1.2.1.16</p>
<h1 id="配置团体名并引用acl和mib视图">配置团体名并引用ACL和MIB视图。</h1>
<p>[Switch] snmp-agent community write adminnms2 mib-view allextrmon acl 2001   //配置访问权限，使NMS2可以管理交换机上RMON之外的节点</p>
<p>SNMPV3配置举例：<br>
SNMPv3的实现原理和SNMPv1/SNMPv2c基本一致，唯一的区别是SNMPv3增加了身份验证和加密处理，下面是SNMPv3配置举例：<br>
1、配置Switch的接口IP地址，使其和网管站之间路由可达<br>
<HUAWEI> system-view<br>
[HUAWEI] sysname Switch<br>
[Switch] vlan 100<br>
[Switch-vlan100] quit<br>
[Switch] interface gigabitethernet 0/0/1<br>
[Switch-GigabitEthernet0/0/1] port link-type hybrid<br>
[Switch-GigabitEthernet0/0/1] port hybrid pvid vlan 100<br>
[Switch-GigabitEthernet0/0/1] port hybrid untagged vlan 100<br>
[Switch-GigabitEthernet0/0/1] quit<br>
[Switch] interface vlanif 100<br>
[Switch-Vlanif100] ip address 10.1.2.1 24<br>
[Switch-Vlanif100] quit<br>
2、配置Switch的SNMP版本<br>
[Switch] snmp-agent sys-info version v3    //可不配置，默认为V3版本<br>
3、配置团体名<br>
[Switch] snmp-agent community write adminnms2<br>
4、配置用户组<br>
[Switch] snmp-agent group v3 admin privacy   //配置用户组的安全方式为privacy，表示既认证又加密，admin表示用户组的名称<br>
5、配置用户相关信息</p>
<h1 id="配置用户并关联用户组">配置用户并关联用户组。</h1>
<p>[Switch] snmp-agent usm-user v3 nms2-admin group admin   // nms2-admin表示用户名，admin表示用户组名称，与前一条命令中配置保持一致</p>
<h1 id="对用户的数据进行认证认证密码为authe1234-因为用户的安全级别必须-用户组的安全级别上面用户组方式为既认证又加密所以下面用户必须同时配置认证和加密">对用户的数据进行认证，认证密码为Authe@1234。（因为用户的安全级别必须 &gt;= 用户组的安全级别，上面用户组方式为既认证又加密，所以下面用户必须同时配置认证和加密）</h1>
<p>[Switch] snmp-agent usm-user v3 nms2-admin authentication-mode sha<br>
Please configure the authentication password (8-64)<br>
Enter Password:                  //输入认证密码，本例的认证密码为：Authe@1234。<br>
Confirm Password:                //输入认证密码，本例的认证密码为：Authe@1234。</p>
<h1 id="对用户的数据进行加密加密密码为priva1234">对用户的数据进行加密，加密密码为Priva@1234。</h1>
<p>[Switch] snmp-agent usm-user v3 nms2-admin privacy-mode aes128<br>
Please configure the privacy password (8-64)<br>
Enter Password:                  //输入加密密码，本例的加密密码为：Priva@1234。<br>
Confirm Password:                //输入加密密码，本例的加密密码为：Priva@1234。<br>
5、配置告警主机<br>
[Switch] snmp-agent target-host trap address udp-domain 10.1.1.2 params securityname nms2-admin v3 privacy</p>
<p>说明1：对于SNMPv3版本，securityname必须配置为用户名。告警主机和网管都需要配置此参数，如果网管要接收告警主机发送的告警，必须通过该参数（包括认证和加密的方式）的校验，否则告警无法接收。<br>
说明2：由于上面用户和用户组的基本都是privacy（既认证又加密），所以这里告警主机的安全级别必须为privacy。</p>
<p>SNMPV3用户，用户组及告警主机安全级别配置说明<br>
设备具备三种属性，按照安全性从高到低为：<br>
·     1级：privacy （认证且加密）<br>
·     2级：authentication （只认证）<br>
·     3级：noauthentication （不认证不加密）</p>
<p>要求用户的安全级别必须 &gt;=告警主机的安全级别&gt;= 用户组的安全级别<br>
·     如果用户组的安全级别是privacy，那么告警主机和用户的安全级别一定得是privacy。<br>
·     如果用户组的安全级别是authentication，那么告警主机的安全级别是authentication，用户的安全级别可以是authentication和privacy。<br>
·     如果用户组的安全级别是authentication，告警主机的安全级别是privacy，那么用户的安全级别是privacy。<br>
·     如果用户组的安全级别是noauthentication，告警主机的安全级别是noauthentication，那么用户的安全级别可以是noauthentication、authentication、privacy。<br>
·     如果用户组的安全级别是noauthentication，告警主机的安全级别是authentication，那么用户的安全级别可以是authentication和privacy。<br>
·     如果用户组的安全级别是noauthentication，告警主机的安全级别是privacy，那么用户的安全级别是privacy。</p>
<p>上面的配置为SNMPV3必须配置的选项，针对其他的配置，都是按照需求来进行，比如限制网管对设备的管理权限。</p>
<h1 id="配置acl使nms2可以管理交换机nms1不允许管理交换机-2">配置ACL，使NMS2可以管理交换机，NMS1不允许管理交换机。</h1>
<p>[Switch] acl 2001<br>
[Switch-acl-basic-2001] rule 5 permit source 10.1.1.2 0.0.0.0<br>
[Switch-acl-basic-2001] rule 6 deny source 10.1.1.1 0.0.0.0<br>
[Switch-acl-basic-2001] quit</p>
<h1 id="配置mib视图限制nms2可以管理交换机上除rmon之外的节点-2">配置MIB视图，限制NMS2可以管理交换机上除RMON之外的节点。</h1>
<p>[Switch] snmp-agent mib-view included isoview iso</p>
<h1 id="配置用户组并引用acl和mib视图">配置用户组并引用ACL和MIB视图。</h1>
<p>[Switch] snmp-agent group v3 admin privacy write-view isoview acl 2001  //配置访问权限，使NMS2可以管理ISO节点</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一条网线有八根线，空闲的四根能做什么？]]></title>
        <id>https://book.baidv.win/post/yi-tiao-wang-xian-you-ba-gen-xian-kong-xian-de-si-gen-neng-zuo-shi-me/</id>
        <link href="https://book.baidv.win/post/yi-tiao-wang-xian-you-ba-gen-xian-kong-xian-de-si-gen-neng-zuo-shi-me/">
        </link>
        <updated>2020-02-26T16:56:00.000Z</updated>
        <content type="html"><![CDATA[<p>一条网线里面有八根线，多数情况下实际有用的只有四根（橙白、橙、绿白、绿），另外四根（蓝白、蓝、棕白、棕）就空着不用。这给了我们很多省事的机会，用上这四根线，就不用重新拉线了。来看看这四根线能做什么？</p>
<p><img src="https://book.baidv.win/post-images/1582736196547.jpg" alt="" loading="lazy"><br>
网线才用一半，那另一半岂不是可以再拉一路网线。理论上可以，实际上也可以。不过不能拉太远。因为蓝白、蓝、棕白、棕这四根线的电阻比橙白、橙、绿白、绿这四根的要大的多，并且绕线密度也不一样，所以传输距离会小很多。<br>
<img src="https://book.baidv.win/post-images/1582736242356.jpg" alt="" loading="lazy"><br>
办公上最常用的就是接电话线了。电话线是用两芯的，也就是说一路电话线要用两根线。这样一条网线除了上网，还能拉两路电话线。PS：注意拉线时不要用测线仪测电话线，电话线电压高，有些测线仪会烧掉的。网卡电压3.3v以下，电话线平时一二十伏，来电时能超过50v。<br>
<img src="https://book.baidv.win/post-images/1582736279863.jpg" alt="" loading="lazy"><br>
还一种比较常用的就是接摄像头。模拟摄像头是两芯的，也跟电话线一样可以接两路。高清头是四芯的，只能接一路了。摄像头这样接还要另外供电。<br>
<img src="https://book.baidv.win/post-images/1582736304697.jpg" alt="" loading="lazy"><br>
再来说说USB，功能太多了。USB是四芯的，一根接地，一根供电（5v），两根传数据。四根线两头颜色对好接上就行了。可以当作USB延长线，接手机，连打印机等。打印机这样接十米都没问题，比usb线效果还好。</p>
<p><img src="https://book.baidv.win/post-images/1582736336102.jpg" alt="" loading="lazy"><br>
一般LED屏显示的内容都是通过插U盘上传的。如果显示实时内容就要用串口（com口）连接电脑。这种串口接线只要接3根就行，网线4根够用了。不过串口线长度不要超过30米。<br>
<img src="https://book.baidv.win/post-images/1582736361767.jpg" alt="" loading="lazy"><br>
网线还可以供电，就是我们平常说的PoE（Power over Ethernet）。一路供电用两根线就行了，不过有衰减，有空余的线可以把多根拧成一根，效果会好一点。这种方法仅限于弱电供电。当然也有牛人用它来接220V的交流电，不过小编不敢。</p>
<figure data-type="image" tabindex="1"><img src="https://book.baidv.win/post-images/1582736389055.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[开启ECN功能]]></title>
        <id>https://book.baidv.win/post/kai-qi-ecn-gong-neng/</id>
        <link href="https://book.baidv.win/post/kai-qi-ecn-gong-neng/">
        </link>
        <updated>2020-02-25T17:32:16.000Z</updated>
        <content type="html"><![CDATA[<p>登录服务器，单击 开始 &gt; 运行，输入 cmd，进入命令行窗口。<br>
执行如下命令，查看TCP全局参数的信息。<br>
netsh interface tcp show global<br>
系统显示类似如下，则说明系统已经开启ECN功能</p>
<figure data-type="image" tabindex="1"><img src="https://book.baidv.win/post-images/1582652009787.png" alt="" loading="lazy"></figure>
<p>执行如下命令，关闭ECN功能。<br>
netsh interface tcp set global ecncapability=disabled<br>
执行如下命令，开启ECN功能<br>
netsh interface tcp set global ecncapability=enabled<br>
执行如下命令，查看TCP全局参数的信息，确认 ECN 功能 为 disabled。<br>
netsh interface tcp show global</p>
<p>更多信息<br>
ECN的作用主要是在网络出现拥塞时通知TCP的传输层，减少TCP连接中被丢弃的数据包数量，达到避免重传、减少等待时间、减少网络抖动的效果。但是有些网络设备的配置规则不能与ECN兼容，例如打印机、路由器。这些设备会将ECN交换包视为非法，同时丢弃已设置ECN的数据包，导致网络出现问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[公共 DNS 服务器 IP 地址]]></title>
        <id>https://book.baidv.win/post/gong-gong-dns-fu-wu-qi-ip-di-zhi/</id>
        <link href="https://book.baidv.win/post/gong-gong-dns-fu-wu-qi-ip-di-zhi/">
        </link>
        <updated>2020-02-25T02:56:24.000Z</updated>
        <content type="html"><![CDATA[<p>名称                                           	     DNS 服务器IP 地址<br>
114 DNS	                              114.114.114.114	114.114.115.115<br>
阿里 AliDNS	                          223.5.5.5	             223.6.6.6<br>
百度 BaiduDNS	                  180.76.76.76<br>
DNSPod DNS+	                    119.29.29.29	     182.254.116.116<br>
CNNIC SDNS                        1.2.4.8	                210.2.4.8<br>
oneDNSDNS 派	                117.50.11.11	      52.80.66.66<br>
电信/移动/铁通	                    101.226.4.6	           218.30.118.6<br>
DNS 派 联通	                         123.125.81.6	       140.207.198.6<br>
Cloudflare DNS	                  1.1.1.1	                 1.0.0.1<br>
Google DNS	                       8.8.8.8	                  8.8.4.4<br>
IBM Quad9	                        9.9.9.9<br>
DNS.SB	                               185.222.222.222	  185.184.222.222<br>
OpenDNS	                            208.67.222.222	    208.67.220.220<br>
V2EX DNS	                        199.91.73.222	     178.79.131.110</p>
<p>香港电信                                202.181.202.140    202.181.224.140<br>
香港联通                                205.252.144.228    208.151.69.65<br>
澳门 V                                   202.175.3.8            202.175.3.3<br>
台湾                                      168.95.192.1          168.95.1.1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[网线水晶头接法和线序（图文详解）]]></title>
        <id>https://book.baidv.win/post/wang-xian-shui-jing-tou-jie-fa-he-xian-xu-tu-wen-xiang-jie/</id>
        <link href="https://book.baidv.win/post/wang-xian-shui-jing-tou-jie-fa-he-xian-xu-tu-wen-xiang-jie/">
        </link>
        <updated>2020-02-24T14:23:00.000Z</updated>
        <content type="html"><![CDATA[<p>水晶头接线颜色有两种：<br>
1.平行线的做法是：两头同为568A标准或568B标准。（常用）</p>
<p>2.交叉线的做法是：一头568A标准，一头568B标准。</p>
<p>568A标准顺序：绿白，绿，橙白，蓝，蓝白，橙，棕白，棕</p>
<p>568B标准顺序：橙白，橙，绿白，蓝，蓝白，绿，棕白，棕</p>
<p>如果连接的双方地位不对等的，则用平行线，例如电脑连接到路由器或交换机。</p>
<p>如果连接的两台设备是对等的，则用交叉线，例如电脑连接到电脑。<br>
<img src="https://book.baidv.win/post-images/1582554223204.jpg" alt="" loading="lazy"></p>
<p>扩展资料</p>
<p>网线质量鉴别<br>
三类线的标识是“CAT3”，带宽10M，适用于十兆网基本已淘汰；五类线的标识是“CAT5”，带宽100M ，适用于百兆以下的网；超五类线的标识是“CAT5E”，带宽155M，是主流产品；六类线的标识是“ CAT6”，带宽250M，用于架设千兆网</p>
<p>除了假线外，市面上有很多用三类线冒充五类线、超五类线的情况。下面是网线的鉴别方法：</p>
<p>三类线里的线是二对四根，五类线里的线是四对八根。</p>
<p>真线的外胶皮不易燃烧，而假线的外胶皮大部分是易燃的。</p>
<p>假线在较高温下（40℃以上）外胶皮会变软，真的不会。</p>
<p>真线内部的铜芯用料较纯，比较软、有韧性而且不易被拉断。</p>
<p>网线的扭绕方向是逆时针扭绕而不是顺时针绕的。顺时针绕会对速度和传输距离有影响。</p>
<p>网线里的线在对绕时圈数是不一样的，因为圈数一样的话两对线之间的传输信号会互相干扰，使传输距离变短。</p>
<p>屏蔽双绞线的导线与胶皮间有一层金属网和绝缘材料，水晶头外面也被金属所包裹。</p>
<p>有条件的话可以找100米的双绞线利用Windows中的“网络监视器”或“资源监视器”实地测试一下，5类线能达到100Mbps，3类线只有10Mbps。</p>
<p>网线标准长度1000英尺/箱（大约相当于305米）</p>
<p>使用磁铁可以鉴别铁芯线，如果网线用磁铁可以吸引（哪怕是轻微的吸引），那说明是铁芯线，铁芯线因为电阻大，严重影响传输效率和传输距离，不推荐购买。优质的网线一般都是使用铜作为线芯的。即使差一些的线，也应该使用铝作为线芯。</p>
<p>剥开少许网线，看一下线芯的粗细，线芯细了也会影响传输效率。所以应该选用相对而言线芯粗的。</p>
]]></content>
    </entry>
</feed>